{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1475925958742},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1475925958742},{"_id":"themes/next/.gitignore","hash":"80710b94ff2f6c013859ebffffe90f9295fc94ed","modified":1475925958743},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1475925958743},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1475925958743},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1475925958743},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1475925958743},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1475925958744},{"_id":"themes/next/_config.yml","hash":"d32360cdb95a84f3884956349bf6649b08f5cb9a","modified":1475925958744},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1475925958744},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1475925958744},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1475925958761},{"_id":"source/_posts/Android6.0运行时权限分析.md","hash":"32e5cd904207714f2a818c87fd78e4dfb00d48b3","modified":1475925958712},{"_id":"source/_posts/AndroidGradle自动化打包.md","hash":"35856ca1993d0f5e074a8e3d7caf0db7d60caaf3","modified":1475925958712},{"_id":"source/_posts/Android使用自定义证书的HTTPS通信.md","hash":"59bd60fcaadcf372965ad21bc9211c255ef521ed","modified":1475925958712},{"_id":"source/_posts/Android逆向分析.md","hash":"1d698a7afbe21de2b12e88227dc63d5683befeb7","modified":1475925958713},{"_id":"source/_posts/GitPage系列-Hexo使用方法.md","hash":"27574bdf9051599381da382b01df1fd097fecc61","modified":1475925958713},{"_id":"source/_posts/Gradle入门到精通.md","hash":"e1f81055b58dc91b8e19e676127cf760656b523b","modified":1475925958713},{"_id":"source/_posts/ImageView scaleType属性分析.md","hash":"58d8d66ae4017b523441f63b1e94ec3f3c0b8462","modified":1475925958713},{"_id":"source/_posts/利用git解决hexo博客多PC间同步问题.md","hash":"3fa2b733136de9212da66d7485c61c7f66918686","modified":1475925958714},{"_id":"source/categories/index.md","hash":"65c2caf930d0ee818cf379798876ef999a2ee169","modified":1475925958714},{"_id":"source/tags/index.md","hash":"490c198c90724731a4fd6930ad2b0a7159f4b739","modified":1475925958714},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1475925958742},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1475925958742},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1475925958745},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1475925958745},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1475925958745},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1475925958745},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1475925958745},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1475925958746},{"_id":"themes/next/languages/ko.yml","hash":"feed5fdb677f87fbb9ba2b6e4413e7011180708e","modified":1475925958746},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1475925958746},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1475925958747},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1475925958747},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1475925958747},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1475925958747},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1475925958747},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1475925958748},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1475925958760},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1475925958760},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1475925958760},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1475925958760},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1475925958761},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1475925958761},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1475925958761},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1475925958815},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1475925958815},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1475925958815},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1475925958785},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1475925958748},{"_id":"themes/next/layout/_macro/post.swig","hash":"f0862e443e1c7b9ef4a6b619b51ba6038a99a567","modified":1475925958748},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1475925958749},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"8aa5212d803670179222dbc80e73eadd7328d8e5","modified":1475925958749},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1475925958749},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d04a53cb1bb8a5f462b05107e9c566c2dfbf4c7d","modified":1475925958750},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1475925958750},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d749b5b6b48dac6ddf5084e470122b09ce0a215a","modified":1475925958750},{"_id":"themes/next/layout/_partials/head.swig","hash":"881abebed3a7fa71827365b0ba0e84ec525eeb7f","modified":1475925958750},{"_id":"themes/next/layout/_partials/header.swig","hash":"c0697644817f1570093de9f17ea096295da8c5f1","modified":1475925958751},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1475925958751},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1475925958751},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1475925958753},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1475925958754},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1475925958754},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1475925958759},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1475925958762},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1475925958762},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1475925958762},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1475925958784},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1475925958785},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1475925958786},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1475925958785},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1475925958786},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1475925958787},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1475925958787},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1475925958787},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1475925958787},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1475925958786},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1475925958788},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1475925958785},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1475925958788},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1475925958788},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1475925958754},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1475925958755},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1475925958777},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1475925958777},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1475925958777},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1475925958783},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1475925958784},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1475925958751},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1475925958752},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1475925958752},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1475925958752},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1475925958752},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1475925958752},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1475925958753},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1475925958753},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1475925958754},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1475925958755},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1475925958755},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1475925958758},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1475925958758},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f6b46096208512b4d8680c024fcb68f03ceab008","modified":1475925958759},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1475925958759},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1475925958759},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1475925958776},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1475925958777},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1475925958783},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1475925958777},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1475925958784},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1475925958784},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1475925958788},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1475925958789},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1475925958789},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1475925958789},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1475925958791},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1475925958791},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1475925958791},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1475925958796},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1475925958797},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1475925958797},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1475925958797},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1475925958799},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1475925958799},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1475925958799},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1475925958799},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1475925958799},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1475925958807},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1475925958808},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1475925958809},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1475925958809},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1475925958809},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1475925958809},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1475925958810},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1475925958811},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1475925958811},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1475925958814},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1475925958814},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1475925958814},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1475925958808},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1475925958755},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1475925958756},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1475925958756},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1475925958756},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a576c23d426ab236eb3dcd0bfe1b3f0b0c54ad1a","modified":1475925958756},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1475925958757},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"0a2f48971d86ea72e1a8fd1d8bbf2b7d423666b2","modified":1475925958758},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1475925958758},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1475925958763},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1475925958764},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1475925958763},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1475925958763},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1475925958767},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1475925958772},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1475925958775},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1475925958775},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1475925958776},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1475925958776},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1475925958775},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1475925958776},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1475925958778},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1475925958778},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1475925958778},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1475925958779},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1475925958779},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1475925958779},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1475925958779},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1475925958780},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1475925958780},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1475925958780},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1475925958781},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1475925958781},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1475925958782},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1475925958782},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1475925958782},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1475925958782},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1475925958782},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1475925958783},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1475925958783},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1475925958791},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1475925958792},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1475925958792},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1475925958793},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1475925958793},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1475925958793},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1475925958793},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1475925958795},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1475925958796},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1475925958796},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1475925958798},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1475925958798},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1475925958800},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1475925958800},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1475925958801},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1475925958807},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1475925958811},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1475925958810},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1475925958802},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1475925958803},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1475925958806},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1475925958813},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1475925958764},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1475925958764},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1475925958764},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1475925958765},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1475925958765},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1475925958765},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1475925958765},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1475925958766},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1475925958766},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1475925958766},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1475925958766},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1475925958767},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1475925958767},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1475925958767},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1475925958768},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1475925958768},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1475925958768},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1475925958768},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1475925958769},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1475925958769},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1475925958769},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1475925958769},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1475925958769},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1475925958770},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1475925958770},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1475925958770},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1475925958770},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1475925958771},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1475925958771},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1475925958771},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1475925958771},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1475925958771},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1475925958772},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1475925958772},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1475925958772},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1475925958773},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1475925958773},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1475925958773},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1475925958773},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1475925958774},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1475925958774},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1475925958774},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1475925958774},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1475925958779},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1475925958780},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1475925958781},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1475925958794},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1475925958794},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1475925958795},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1475925958794},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1475925958795},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1475925958795},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1475925958805},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1475925958804},{"_id":"public/categories/index.html","hash":"94bb66b88ef426f4c2cd34a80bc3f06677209500","modified":1475926091560},{"_id":"public/tags/index.html","hash":"2c6ebe3a86aaaa6e1754178e766dc28c18d489d9","modified":1475926091563},{"_id":"public/2016/10/07/GitPage系列-Hexo使用方法/index.html","hash":"41544ab13db53cd8c96d62a51fa1bf97d1d4a3ed","modified":1475926091563},{"_id":"public/archives/index.html","hash":"c19b933e08393dcf66ff04c69960eac37d52cde9","modified":1475926091563},{"_id":"public/archives/2016/index.html","hash":"fd5ce1652f73c0b57dc455d8554ab4b88e375f54","modified":1475926091564},{"_id":"public/archives/2016/07/index.html","hash":"bc635080914ed5cdf7fa89c97f22f3a38b382e90","modified":1475926091564},{"_id":"public/archives/2016/10/index.html","hash":"b5c3a3c633ea01c0ff59163131f3b3b0f6fbc0dc","modified":1475926091564},{"_id":"public/categories/任垣宇/index.html","hash":"7d5a0bf2bdcf51132ac5eb8dcbebb5fec8be2702","modified":1475926091564},{"_id":"public/tags/Android/index.html","hash":"7e0fecaa837ce108973f171e6f84ef2944bf9bb0","modified":1475926091565},{"_id":"public/tags/github/index.html","hash":"d0b495b703d851cef4a174e15e811c39cb222cfc","modified":1475926091565},{"_id":"public/2016/10/06/Android6.0运行时权限分析/index.html","hash":"6adab287c6032a5ffc9ebbc09b3ed61a7b268deb","modified":1475926091565},{"_id":"public/2016/10/06/AndroidGradle自动化打包/index.html","hash":"9fc1250ed5af935956b3d99b61215557c5eec638","modified":1475926091565},{"_id":"public/2016/07/23/Android逆向分析/index.html","hash":"8220caa378ac64ba1cc4a7113430c81232751126","modified":1475926091565},{"_id":"public/2016/07/23/Gradle入门到精通/index.html","hash":"634e8233a2f174fc1d2ac7c08899a00656d2d334","modified":1475926091565},{"_id":"public/index.html","hash":"81e972e2fc739cd9225ea5be2182c210413703c7","modified":1475926091565},{"_id":"public/2016/10/08/利用git解决hexo博客多PC间同步问题/index.html","hash":"a441fa8c9b7ed353f36604c0f5b7ab99bdbbbd2b","modified":1475926091563},{"_id":"public/archives/page/2/index.html","hash":"79be3ab5f385d25471802442a618864d2f361026","modified":1475926091563},{"_id":"public/archives/2016/page/2/index.html","hash":"7b28010c78078c235fb9bb7eaa316193be96d5d0","modified":1475926091564},{"_id":"public/archives/2016/10/page/2/index.html","hash":"8de7b3be6c997d8176333bf84779282717107b9d","modified":1475926091564},{"_id":"public/categories/任垣宇/page/2/index.html","hash":"9c9ebe573c2dbf7bc92e1fb8776275cae68cb5ed","modified":1475926091565},{"_id":"public/tags/Android/page/2/index.html","hash":"a8464d7cbae0ff9d95f75d0717baffc4a9ac1612","modified":1475926091565},{"_id":"public/2016/10/08/Android使用自定义证书的HTTPS通信/index.html","hash":"4adc3ed3b0c2d840020339090d4181a1f4125ecc","modified":1475926091565},{"_id":"public/2016/10/08/ImageView scaleType属性分析/index.html","hash":"cbac7054960e47994c66dca8cb8a2bbf3d92b7ce","modified":1475926091565},{"_id":"public/page/2/index.html","hash":"e1f337febfaf0c55993bf69acf55a573cdd4314a","modified":1475926091565},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1475925975085},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1475925975085},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1475925975086},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1475925975086},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1475925975086},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1475925975086},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1475925975086},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1475925975086},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1475925975086},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1475925975086},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1475925975086},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1475925975086},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1475925975086},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1475925975086},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1475925975087},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1475925975087},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1475925975087},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1475925975087},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1475925975087},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1475925975087},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1475925975087},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1475925975087},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1475925975087},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1475925975087},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1475925975815},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1475925975829},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1475925975831},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1475925975843},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1475925975843},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1475925975844},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1475925975844},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1475925975844},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1475925975844},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1475925975844},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1475925975844},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1475925975844},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1475925975844},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1475925975844},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1475925975844},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1475925975844},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1475925975844},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1475925975844},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1475925975844},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1475925975844},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1475925975845},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1475925975845},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1475925975845},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1475925975845},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1475925975845},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1475925975845},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1475925975845},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1475925975845},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1475925975845},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1475925975845},{"_id":"public/css/main.css","hash":"240cf5bd63fe5b4dc34941079383736343390b82","modified":1475925975845},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1475925975845},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1475925975845},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1475925975845},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1475925975845},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1475925975845},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1475925975845},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1475925975845},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1475925975845},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1475925975845},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1475925975845},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1475925975866},{"_id":"source/_posts/kevin.md","hash":"fe4e765dbf6050109ed3134cd8be54cae966f8aa","modified":1475926072070},{"_id":"public/2016/10/08/kevin/index.html","hash":"e98e062e13d454919072cf606afe898b21ac174e","modified":1475926091566},{"_id":"public/categories/����/index.html","hash":"61f2c5dc4609ebffdae85f9b6ba7eae37d21af54","modified":1475926091566}],"Category":[{"name":"任垣宇","_id":"ciu147tv600043omn3zfh9ivq"},{"name":"����","_id":"ciu14abmx0001skmncvfp61gd"}],"Data":[],"Page":[{"title":"categories","date":"2016-09-28T16:35:46.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-09-29 00:35:46\ntype: \"categories\"\n---\n","updated":"2016-10-08T11:25:58.714Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciu147tv100013omn9x9nacv4","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-09-28T16:33:02.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-09-29 00:33:02\ntype: \"tags\"\n---\n","updated":"2016-10-08T11:25:58.714Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciu147tv400033omn9g0ug63i","content":"","excerpt":"","more":""}],"Post":[{"title":"Android6.0运行时权限分析","date":"2016-10-06T00:55:29.000Z","toc":true,"_content":"\n## 6.0版本（23）前权限规则\n在23版本之前，用户在安装App时，系统会将所有在Manfiest清单上的所有权限默认授权。\n## 6.0版本（23）后权限规则\n\nGoogle是这样解释的[传送门](http://developer.android.com/intl/zh-cn/training/permissions/requesting.html)，大意可以理解从Android 6.0(API级别23)开始,程序权限授予在应用程序运行时，APP除了需要在Manifest文件中声明相应的权限之外，还要在APP运行时向用户进行请求每个dangerous类的权限。用户可以选择授予或不授予该权限，即使用户不授予该权限APP也可以继续运行，但是相关的需要权限的操作是没法进行的。\n\n<!--more-->\n## 影响\n在棉花糖中，系统关闭了对某些数据的访问权限，比如不能再访问本地 WiFi 和蓝牙 MAC 地址信息。 从现在开始，针对 WifiInfo 对象调用 getMacAddress()方法和 BluetoothAdapter.getDefaultAdapter().getAddress() 方法均会返回 02:00:00:00:00:00。\n\n## 兼容性\n23之前的app都能在6.0系统运行，走的还是老权限模式，manifest注册权限全部授予，但是如果开发中以不低于23来编译的话，app走的是新权限模式，如果包含dangerous权限，必须进行申请，否则App会崩掉。\n\n## 6.0的权限分类\n系统权限分为两类：\n1.normal\n* Normal类的权限不会直接涉及到用户隐私风险。如果APP在Manifest文件中声明了Normal类的权限，系统会自动授予这些权限。\n\n2.dangerous\n* Dangerous类的权限可能会让APP涉及到用户机密的数据。如果APP在Manifest文件中声明了Normal类的权限，系统会自动授予这些权限。如果在Manifest文件中添加了Dangerous类的权限，用户必须明确的授予对应的权限后APP才具有这些权限。\n\n关于哪些权限属于Normal类，哪些属于Dangerous类，如下图：\n\n\n## 权限申请流程\n1.在AndroidManifest文件中添加需要的权限。\n\n2.检查权限\n\n```\n// Assume thisActivity is the current activity\nint permissionCheck = ContextCompat.checkSelfPermission(thisActivity,Manifest.permission.WRITE_CALENDAR);\n\n```\n\nContextCompat.checkSelfPermission，主要用于检测某个权限是否已经被授予，方法返回值为     \tPackageManager.PERMISSION_DENIED或者PackageManager.PERMISSION_GRANTED。当返回DENIED就需要进行申请授权了。\n\n3.申请授权\n\n```\n ActivityCompat.requestPermissions(thisActivity,new String[]{Manifest.permission.READ_CONTACTS},MY_PERMISSIONS_REQUEST_READ_CONTACTS);\n\n```\n该方法是异步的，第一个参数是Context；第二个参数是需要申请的权限的字符串数组；第三个参数为requestCode，主要用于回调的时候检测。可以从方法名requestPermissions以及第二个参数看出，是支持一次性申请多个权限的，系统会通过对话框逐一询问用户是否授权。\n\n4.处理权限申请回调\n\n（未完待续）\n","source":"_posts/Android6.0运行时权限分析.md","raw":"---\ntitle: Android6.0运行时权限分析 \ndate: 2016-10-6 08:55:29   \ncategories: 任垣宇   \ntag: Android\ntoc: true  \n---\n\n## 6.0版本（23）前权限规则\n在23版本之前，用户在安装App时，系统会将所有在Manfiest清单上的所有权限默认授权。\n## 6.0版本（23）后权限规则\n\nGoogle是这样解释的[传送门](http://developer.android.com/intl/zh-cn/training/permissions/requesting.html)，大意可以理解从Android 6.0(API级别23)开始,程序权限授予在应用程序运行时，APP除了需要在Manifest文件中声明相应的权限之外，还要在APP运行时向用户进行请求每个dangerous类的权限。用户可以选择授予或不授予该权限，即使用户不授予该权限APP也可以继续运行，但是相关的需要权限的操作是没法进行的。\n\n<!--more-->\n## 影响\n在棉花糖中，系统关闭了对某些数据的访问权限，比如不能再访问本地 WiFi 和蓝牙 MAC 地址信息。 从现在开始，针对 WifiInfo 对象调用 getMacAddress()方法和 BluetoothAdapter.getDefaultAdapter().getAddress() 方法均会返回 02:00:00:00:00:00。\n\n## 兼容性\n23之前的app都能在6.0系统运行，走的还是老权限模式，manifest注册权限全部授予，但是如果开发中以不低于23来编译的话，app走的是新权限模式，如果包含dangerous权限，必须进行申请，否则App会崩掉。\n\n## 6.0的权限分类\n系统权限分为两类：\n1.normal\n* Normal类的权限不会直接涉及到用户隐私风险。如果APP在Manifest文件中声明了Normal类的权限，系统会自动授予这些权限。\n\n2.dangerous\n* Dangerous类的权限可能会让APP涉及到用户机密的数据。如果APP在Manifest文件中声明了Normal类的权限，系统会自动授予这些权限。如果在Manifest文件中添加了Dangerous类的权限，用户必须明确的授予对应的权限后APP才具有这些权限。\n\n关于哪些权限属于Normal类，哪些属于Dangerous类，如下图：\n\n\n## 权限申请流程\n1.在AndroidManifest文件中添加需要的权限。\n\n2.检查权限\n\n```\n// Assume thisActivity is the current activity\nint permissionCheck = ContextCompat.checkSelfPermission(thisActivity,Manifest.permission.WRITE_CALENDAR);\n\n```\n\nContextCompat.checkSelfPermission，主要用于检测某个权限是否已经被授予，方法返回值为     \tPackageManager.PERMISSION_DENIED或者PackageManager.PERMISSION_GRANTED。当返回DENIED就需要进行申请授权了。\n\n3.申请授权\n\n```\n ActivityCompat.requestPermissions(thisActivity,new String[]{Manifest.permission.READ_CONTACTS},MY_PERMISSIONS_REQUEST_READ_CONTACTS);\n\n```\n该方法是异步的，第一个参数是Context；第二个参数是需要申请的权限的字符串数组；第三个参数为requestCode，主要用于回调的时候检测。可以从方法名requestPermissions以及第二个参数看出，是支持一次性申请多个权限的，系统会通过对话框逐一询问用户是否授权。\n\n4.处理权限申请回调\n\n（未完待续）\n","slug":"Android6.0运行时权限分析","published":1,"updated":"2016-10-08T11:25:58.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu147tux00003omnpwb15kui","content":"<h2 id=\"6-0版本（23）前权限规则\"><a href=\"#6-0版本（23）前权限规则\" class=\"headerlink\" title=\"6.0版本（23）前权限规则\"></a>6.0版本（23）前权限规则</h2><p>在23版本之前，用户在安装App时，系统会将所有在Manfiest清单上的所有权限默认授权。</p>\n<h2 id=\"6-0版本（23）后权限规则\"><a href=\"#6-0版本（23）后权限规则\" class=\"headerlink\" title=\"6.0版本（23）后权限规则\"></a>6.0版本（23）后权限规则</h2><p>Google是这样解释的<a href=\"http://developer.android.com/intl/zh-cn/training/permissions/requesting.html\" target=\"_blank\" rel=\"external\">传送门</a>，大意可以理解从Android 6.0(API级别23)开始,程序权限授予在应用程序运行时，APP除了需要在Manifest文件中声明相应的权限之外，还要在APP运行时向用户进行请求每个dangerous类的权限。用户可以选择授予或不授予该权限，即使用户不授予该权限APP也可以继续运行，但是相关的需要权限的操作是没法进行的。</p>\n<a id=\"more\"></a>\n<h2 id=\"影响\"><a href=\"#影响\" class=\"headerlink\" title=\"影响\"></a>影响</h2><p>在棉花糖中，系统关闭了对某些数据的访问权限，比如不能再访问本地 WiFi 和蓝牙 MAC 地址信息。 从现在开始，针对 WifiInfo 对象调用 getMacAddress()方法和 BluetoothAdapter.getDefaultAdapter().getAddress() 方法均会返回 02:00:00:00:00:00。</p>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p>23之前的app都能在6.0系统运行，走的还是老权限模式，manifest注册权限全部授予，但是如果开发中以不低于23来编译的话，app走的是新权限模式，如果包含dangerous权限，必须进行申请，否则App会崩掉。</p>\n<h2 id=\"6-0的权限分类\"><a href=\"#6-0的权限分类\" class=\"headerlink\" title=\"6.0的权限分类\"></a>6.0的权限分类</h2><p>系统权限分为两类：<br>1.normal</p>\n<ul>\n<li>Normal类的权限不会直接涉及到用户隐私风险。如果APP在Manifest文件中声明了Normal类的权限，系统会自动授予这些权限。</li>\n</ul>\n<p>2.dangerous</p>\n<ul>\n<li>Dangerous类的权限可能会让APP涉及到用户机密的数据。如果APP在Manifest文件中声明了Normal类的权限，系统会自动授予这些权限。如果在Manifest文件中添加了Dangerous类的权限，用户必须明确的授予对应的权限后APP才具有这些权限。</li>\n</ul>\n<p>关于哪些权限属于Normal类，哪些属于Dangerous类，如下图：</p>\n<h2 id=\"权限申请流程\"><a href=\"#权限申请流程\" class=\"headerlink\" title=\"权限申请流程\"></a>权限申请流程</h2><p>1.在AndroidManifest文件中添加需要的权限。</p>\n<p>2.检查权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Assume thisActivity is the current activity</div><div class=\"line\">int permissionCheck = ContextCompat.checkSelfPermission(thisActivity,Manifest.permission.WRITE_CALENDAR);</div></pre></td></tr></table></figure>\n<p>ContextCompat.checkSelfPermission，主要用于检测某个权限是否已经被授予，方法返回值为         PackageManager.PERMISSION_DENIED或者PackageManager.PERMISSION_GRANTED。当返回DENIED就需要进行申请授权了。</p>\n<p>3.申请授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ActivityCompat.requestPermissions(thisActivity,new String[]&#123;Manifest.permission.READ_CONTACTS&#125;,MY_PERMISSIONS_REQUEST_READ_CONTACTS);</div></pre></td></tr></table></figure>\n<p>该方法是异步的，第一个参数是Context；第二个参数是需要申请的权限的字符串数组；第三个参数为requestCode，主要用于回调的时候检测。可以从方法名requestPermissions以及第二个参数看出，是支持一次性申请多个权限的，系统会通过对话框逐一询问用户是否授权。</p>\n<p>4.处理权限申请回调</p>\n<p>（未完待续）</p>\n","excerpt":"<h2 id=\"6-0版本（23）前权限规则\"><a href=\"#6-0版本（23）前权限规则\" class=\"headerlink\" title=\"6.0版本（23）前权限规则\"></a>6.0版本（23）前权限规则</h2><p>在23版本之前，用户在安装App时，系统会将所有在Manfiest清单上的所有权限默认授权。</p>\n<h2 id=\"6-0版本（23）后权限规则\"><a href=\"#6-0版本（23）后权限规则\" class=\"headerlink\" title=\"6.0版本（23）后权限规则\"></a>6.0版本（23）后权限规则</h2><p>Google是这样解释的<a href=\"http://developer.android.com/intl/zh-cn/training/permissions/requesting.html\">传送门</a>，大意可以理解从Android 6.0(API级别23)开始,程序权限授予在应用程序运行时，APP除了需要在Manifest文件中声明相应的权限之外，还要在APP运行时向用户进行请求每个dangerous类的权限。用户可以选择授予或不授予该权限，即使用户不授予该权限APP也可以继续运行，但是相关的需要权限的操作是没法进行的。</p>","more":"<h2 id=\"影响\"><a href=\"#影响\" class=\"headerlink\" title=\"影响\"></a>影响</h2><p>在棉花糖中，系统关闭了对某些数据的访问权限，比如不能再访问本地 WiFi 和蓝牙 MAC 地址信息。 从现在开始，针对 WifiInfo 对象调用 getMacAddress()方法和 BluetoothAdapter.getDefaultAdapter().getAddress() 方法均会返回 02:00:00:00:00:00。</p>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p>23之前的app都能在6.0系统运行，走的还是老权限模式，manifest注册权限全部授予，但是如果开发中以不低于23来编译的话，app走的是新权限模式，如果包含dangerous权限，必须进行申请，否则App会崩掉。</p>\n<h2 id=\"6-0的权限分类\"><a href=\"#6-0的权限分类\" class=\"headerlink\" title=\"6.0的权限分类\"></a>6.0的权限分类</h2><p>系统权限分为两类：<br>1.normal</p>\n<ul>\n<li>Normal类的权限不会直接涉及到用户隐私风险。如果APP在Manifest文件中声明了Normal类的权限，系统会自动授予这些权限。</li>\n</ul>\n<p>2.dangerous</p>\n<ul>\n<li>Dangerous类的权限可能会让APP涉及到用户机密的数据。如果APP在Manifest文件中声明了Normal类的权限，系统会自动授予这些权限。如果在Manifest文件中添加了Dangerous类的权限，用户必须明确的授予对应的权限后APP才具有这些权限。</li>\n</ul>\n<p>关于哪些权限属于Normal类，哪些属于Dangerous类，如下图：</p>\n<h2 id=\"权限申请流程\"><a href=\"#权限申请流程\" class=\"headerlink\" title=\"权限申请流程\"></a>权限申请流程</h2><p>1.在AndroidManifest文件中添加需要的权限。</p>\n<p>2.检查权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Assume thisActivity is the current activity</div><div class=\"line\">int permissionCheck = ContextCompat.checkSelfPermission(thisActivity,Manifest.permission.WRITE_CALENDAR);</div></pre></td></tr></table></figure>\n<p>ContextCompat.checkSelfPermission，主要用于检测某个权限是否已经被授予，方法返回值为         PackageManager.PERMISSION_DENIED或者PackageManager.PERMISSION_GRANTED。当返回DENIED就需要进行申请授权了。</p>\n<p>3.申请授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ActivityCompat.requestPermissions(thisActivity,new String[]&#123;Manifest.permission.READ_CONTACTS&#125;,MY_PERMISSIONS_REQUEST_READ_CONTACTS);</div></pre></td></tr></table></figure>\n<p>该方法是异步的，第一个参数是Context；第二个参数是需要申请的权限的字符串数组；第三个参数为requestCode，主要用于回调的时候检测。可以从方法名requestPermissions以及第二个参数看出，是支持一次性申请多个权限的，系统会通过对话框逐一询问用户是否授权。</p>\n<p>4.处理权限申请回调</p>\n<p>（未完待续）</p>"},{"title":"Android使用自定义证书的HTTPS通信","date":"2016-10-08T09:28:02.000Z","toc":true,"_content":"\n# 什么是自签名证书\nAndroid已经把将近150个CA根证书（数字证书认证机构认证过的证书）内置在手机中，这150多个证书被全世界信赖，自签名证书代指没有通过受信任的证书颁发机构（非android默认信任的证书机构也归为此类）。\n\n# SSL证书分类\n1. 由android认可的证书颁发机构或者该结构下属的机构颁发的证书，比如Symantec，Go Daddy等机构,约150多个。更多的自行在手机“设置->安全->信任的凭据”中查看\n\n2. 没有被android所认可的证书所颁发的证书\n3. 自己颁发的证书\n\n<!--more-->\n\n这三类证书中，只有第一种在使用中不会出现安全提示，不会抛出异常。\n由于我们使用的是自签名的证书，因此客户端不信任服务器，会抛出异常:javax.net.ssl.SSLHandshakeException:.为此，我们需要自定义信任处理器（TrustManager）来替代系统默认的信任处理器，这样我们才能正常的使用自定义的正说或者非android认可的证书颁发机构颁发的证书。\n\n# 解决方案（Retrofit）\n\n## 客户端不内置证书\n由于我们使用的是自签名的证书，所以需要自定义TrustManager,很多处理策略非常简单粗暴：让客户端不对服务器证书做任何验证，这样做相当于直接忽略了检验服务端证书。因此无论服务器的证书如何，都能建立起https链接。\n\n虽然能建立HTTPS连接，但是无形之中间人攻击打开了一道门。有心人完全可以拦截到我们的HTTPS请求，然后用伪造的证书冒充真正服务端的数字证书，由于客户端不对证书做验证（也就没法判断服务端到底是正常的还是伪造的），这样客户端就会和黑客的服务器建立连接。\n\n## 客户端内置证书\n在retrofit中使用自签名证书大致要经过以下几步：\n\n\n- 将证书添加到工程中 \n- 自定义信任管理器TrustManager \n- 用自定义TrustManager代替系统默认的信任管理器\n\n使用非android认证证书颁发机构颁发的证书的关键在于：修改android中SSLContext自带的TrustManager以便能让我们的签名通过验证\n\n","source":"_posts/Android使用自定义证书的HTTPS通信.md","raw":"---\ntitle: Android使用自定义证书的HTTPS通信 \ndate: 2016-10-8 17:28:02   \ncategories: 任垣宇   \ntag: Android\ntoc: true  \n---\n\n# 什么是自签名证书\nAndroid已经把将近150个CA根证书（数字证书认证机构认证过的证书）内置在手机中，这150多个证书被全世界信赖，自签名证书代指没有通过受信任的证书颁发机构（非android默认信任的证书机构也归为此类）。\n\n# SSL证书分类\n1. 由android认可的证书颁发机构或者该结构下属的机构颁发的证书，比如Symantec，Go Daddy等机构,约150多个。更多的自行在手机“设置->安全->信任的凭据”中查看\n\n2. 没有被android所认可的证书所颁发的证书\n3. 自己颁发的证书\n\n<!--more-->\n\n这三类证书中，只有第一种在使用中不会出现安全提示，不会抛出异常。\n由于我们使用的是自签名的证书，因此客户端不信任服务器，会抛出异常:javax.net.ssl.SSLHandshakeException:.为此，我们需要自定义信任处理器（TrustManager）来替代系统默认的信任处理器，这样我们才能正常的使用自定义的正说或者非android认可的证书颁发机构颁发的证书。\n\n# 解决方案（Retrofit）\n\n## 客户端不内置证书\n由于我们使用的是自签名的证书，所以需要自定义TrustManager,很多处理策略非常简单粗暴：让客户端不对服务器证书做任何验证，这样做相当于直接忽略了检验服务端证书。因此无论服务器的证书如何，都能建立起https链接。\n\n虽然能建立HTTPS连接，但是无形之中间人攻击打开了一道门。有心人完全可以拦截到我们的HTTPS请求，然后用伪造的证书冒充真正服务端的数字证书，由于客户端不对证书做验证（也就没法判断服务端到底是正常的还是伪造的），这样客户端就会和黑客的服务器建立连接。\n\n## 客户端内置证书\n在retrofit中使用自签名证书大致要经过以下几步：\n\n\n- 将证书添加到工程中 \n- 自定义信任管理器TrustManager \n- 用自定义TrustManager代替系统默认的信任管理器\n\n使用非android认证证书颁发机构颁发的证书的关键在于：修改android中SSLContext自带的TrustManager以便能让我们的签名通过验证\n\n","slug":"Android使用自定义证书的HTTPS通信","published":1,"updated":"2016-10-08T11:25:58.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu147tv200023omn41ildrn0","content":"<h1 id=\"什么是自签名证书\"><a href=\"#什么是自签名证书\" class=\"headerlink\" title=\"什么是自签名证书\"></a>什么是自签名证书</h1><p>Android已经把将近150个CA根证书（数字证书认证机构认证过的证书）内置在手机中，这150多个证书被全世界信赖，自签名证书代指没有通过受信任的证书颁发机构（非android默认信任的证书机构也归为此类）。</p>\n<h1 id=\"SSL证书分类\"><a href=\"#SSL证书分类\" class=\"headerlink\" title=\"SSL证书分类\"></a>SSL证书分类</h1><ol>\n<li><p>由android认可的证书颁发机构或者该结构下属的机构颁发的证书，比如Symantec，Go Daddy等机构,约150多个。更多的自行在手机“设置-&gt;安全-&gt;信任的凭据”中查看</p>\n</li>\n<li><p>没有被android所认可的证书所颁发的证书</p>\n</li>\n<li>自己颁发的证书</li>\n</ol>\n<a id=\"more\"></a>\n<p>这三类证书中，只有第一种在使用中不会出现安全提示，不会抛出异常。<br>由于我们使用的是自签名的证书，因此客户端不信任服务器，会抛出异常:javax.net.ssl.SSLHandshakeException:.为此，我们需要自定义信任处理器（TrustManager）来替代系统默认的信任处理器，这样我们才能正常的使用自定义的正说或者非android认可的证书颁发机构颁发的证书。</p>\n<h1 id=\"解决方案（Retrofit）\"><a href=\"#解决方案（Retrofit）\" class=\"headerlink\" title=\"解决方案（Retrofit）\"></a>解决方案（Retrofit）</h1><h2 id=\"客户端不内置证书\"><a href=\"#客户端不内置证书\" class=\"headerlink\" title=\"客户端不内置证书\"></a>客户端不内置证书</h2><p>由于我们使用的是自签名的证书，所以需要自定义TrustManager,很多处理策略非常简单粗暴：让客户端不对服务器证书做任何验证，这样做相当于直接忽略了检验服务端证书。因此无论服务器的证书如何，都能建立起https链接。</p>\n<p>虽然能建立HTTPS连接，但是无形之中间人攻击打开了一道门。有心人完全可以拦截到我们的HTTPS请求，然后用伪造的证书冒充真正服务端的数字证书，由于客户端不对证书做验证（也就没法判断服务端到底是正常的还是伪造的），这样客户端就会和黑客的服务器建立连接。</p>\n<h2 id=\"客户端内置证书\"><a href=\"#客户端内置证书\" class=\"headerlink\" title=\"客户端内置证书\"></a>客户端内置证书</h2><p>在retrofit中使用自签名证书大致要经过以下几步：</p>\n<ul>\n<li>将证书添加到工程中 </li>\n<li>自定义信任管理器TrustManager </li>\n<li>用自定义TrustManager代替系统默认的信任管理器</li>\n</ul>\n<p>使用非android认证证书颁发机构颁发的证书的关键在于：修改android中SSLContext自带的TrustManager以便能让我们的签名通过验证</p>\n","excerpt":"<h1 id=\"什么是自签名证书\"><a href=\"#什么是自签名证书\" class=\"headerlink\" title=\"什么是自签名证书\"></a>什么是自签名证书</h1><p>Android已经把将近150个CA根证书（数字证书认证机构认证过的证书）内置在手机中，这150多个证书被全世界信赖，自签名证书代指没有通过受信任的证书颁发机构（非android默认信任的证书机构也归为此类）。</p>\n<h1 id=\"SSL证书分类\"><a href=\"#SSL证书分类\" class=\"headerlink\" title=\"SSL证书分类\"></a>SSL证书分类</h1><ol>\n<li><p>由android认可的证书颁发机构或者该结构下属的机构颁发的证书，比如Symantec，Go Daddy等机构,约150多个。更多的自行在手机“设置-&gt;安全-&gt;信任的凭据”中查看</p>\n</li>\n<li><p>没有被android所认可的证书所颁发的证书</p>\n</li>\n<li>自己颁发的证书</li>\n</ol>","more":"<p>这三类证书中，只有第一种在使用中不会出现安全提示，不会抛出异常。<br>由于我们使用的是自签名的证书，因此客户端不信任服务器，会抛出异常:javax.net.ssl.SSLHandshakeException:.为此，我们需要自定义信任处理器（TrustManager）来替代系统默认的信任处理器，这样我们才能正常的使用自定义的正说或者非android认可的证书颁发机构颁发的证书。</p>\n<h1 id=\"解决方案（Retrofit）\"><a href=\"#解决方案（Retrofit）\" class=\"headerlink\" title=\"解决方案（Retrofit）\"></a>解决方案（Retrofit）</h1><h2 id=\"客户端不内置证书\"><a href=\"#客户端不内置证书\" class=\"headerlink\" title=\"客户端不内置证书\"></a>客户端不内置证书</h2><p>由于我们使用的是自签名的证书，所以需要自定义TrustManager,很多处理策略非常简单粗暴：让客户端不对服务器证书做任何验证，这样做相当于直接忽略了检验服务端证书。因此无论服务器的证书如何，都能建立起https链接。</p>\n<p>虽然能建立HTTPS连接，但是无形之中间人攻击打开了一道门。有心人完全可以拦截到我们的HTTPS请求，然后用伪造的证书冒充真正服务端的数字证书，由于客户端不对证书做验证（也就没法判断服务端到底是正常的还是伪造的），这样客户端就会和黑客的服务器建立连接。</p>\n<h2 id=\"客户端内置证书\"><a href=\"#客户端内置证书\" class=\"headerlink\" title=\"客户端内置证书\"></a>客户端内置证书</h2><p>在retrofit中使用自签名证书大致要经过以下几步：</p>\n<ul>\n<li>将证书添加到工程中 </li>\n<li>自定义信任管理器TrustManager </li>\n<li>用自定义TrustManager代替系统默认的信任管理器</li>\n</ul>\n<p>使用非android认证证书颁发机构颁发的证书的关键在于：修改android中SSLContext自带的TrustManager以便能让我们的签名通过验证</p>"},{"title":"AndroidStudio Gradle 自动化打包","date":"2016-10-06T00:55:29.000Z","toc":true,"_content":"\n## Gradle打包优势\n因为部门业务的性质，APP产品需要对应多个渠道，多个国家输出不同需求，甚至不同支付逻辑的Apk版本，以前部门为了应对需求，采用的策略是一个APP产品对应渠道，国家开多套源码的分支，每一次打包需求过来，不同分支的APP首先便是要升级SDK，然后可能会将一些在别的分支上已经实现的逻辑拷贝到这个分支上，目前部门的APP产品信息记录在禅道文档已经更新到了65个，而部门APP产品（星座、FC、LookerPlus、Wallpaper、WallpaperCutey、Gamebar、ToolBox、SmartLocker、AppLocker、电池卫视、内存医生、WiFi增强器VideoPlus）等十三个独立App，平均每个APP存在6个版本的源码，除去破解产品本身特殊没办法统一源码，正式自研产品的版本也相当之多，现在每次打包拉源代码分支、替换包名、更换各项ID、升级SDK、测试等流程走一遍平均需要4小时左右，效率比较低下，也比较容易疏忽出错。而AndroidStudio Gradle打包方式能够实现一个自研App产品维护一套源码，输出多个渠道、用途的Apk包，能极大提升开发打包的效率、减少出错的可能性。\n\n<!--more-->\n\n## Gradle打包能够实现什么\n1. 能够输出多渠道、多国家版本。\n2. 针对性的输出Debug、dev版本、收费免费版本，输出的包名不一致能够同时安装到手机上测试。\n3. 请求Api与Sandbox不同的服务器接口，例如Wallpaper和WallpaperCutey请求不同的图片资源接口。\n4. 不同apk需要应用名不同，图标不同，某些常量不同。\n\n## Gradle基本概念\n* Gradle是一种依赖管理工具，基于Groovy语言，面向Java应用为主，它抛弃了基于XML的各种繁琐配置，取而代之的是一种基于Groovy的内部领域特定（DSL）语言。\n* 在build.gradle(modul)文件的android节点下defaultConfig属性下定义默认项目配置\n* gradle使用applicationId属性来配置manifest中的packageName属性，目的是为了消除在App包名与java包名相似引起的混乱。\n* gradle构建是动态的，可以从自定义的逻辑代码中读取App版本信息\n\n## 通过Gradle导入第三方依赖项目优势\n* gradle导入jar包更方便，一行代码即可搞定。不像后者那样还要自己去官方下载。\n* 如果官方将jar包更新了，我们只需要在build.gradle中改一下版本号就行了，不用重新去官网下载。\n* jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优，所有通过gradle导入的jar包都是从http://bintray.com/bintray/jcenter 这个中央仓库上扒下来的。如果你需要的jar包在这个网站上没有，那就无法通过gradle的方式来导入，还需以前一样自行加入到项目中并依赖。\n\n## 签名打包的两种方式\n1. 通过Android Studio进行签名\n2. 通过命令行的方式进行签名\n\n## BuildType（构建类型）\nAndroidStudio创建新工程时默认会给工程自动构建工程的debug和release版本，Android plugin允许像创建其他构建类型一样定制debug和release实例，这需要在buildTypes的DSL容器中配置：\n```\nandroid {\n    buildTypes {\n        debug {\n            applicationIdSuffix \".debug\"\n        }\n        jnidebug.initWith(buildTypes.debug)\n        jnidebug {\n            packageNameSuffix \".jnidebug\"\n            jnidebugBuild true\n        }\n    }\n}\n```\n以上代码片段实现了以下功能：\n* 配置默认的debug构建类型：将debug版本的包名设置为<app package>.debug以便能够同时在一台设备上安装debug和release版本的apk。\n* 创建了一个名为“jnidebug”的新构建类型，并且这个构建类型是debug构建类型的一个副本。\n* 继续配置jnidebug构建类型，允许使用JNI组件，并且也添加了不一样的包名后缀。\n\n创建一个新的构建类型就是简单的在buildType标签下添加一个新的元素，并且可以使用initWith()或者直接使用闭包来配置它。\n\n以下是一些可能使用到的属性和默认值：\n\n\nProperty name\t|Default values for debug\t|Default values for release/other\n------------------------|-----------------------------------|-----------------------\ndebuggable    \t\t\t|debuggable    \t\t\t\t\t\t|false\njniDebugBuild    \t\t|false\t\t\t\t\t\t\t\t|false\nrenderscriptDebugBuild  |false\t\t\t\t\t\t\t\t|false\nrenderscriptOptimLevel  |3\t\t\t\t\t\t\t\t\t|3\npackageNameSuffix    \t|null\t\t\t\t\t\t\t\t|null\nversionNameSuffix    \t|null\t\t\t\t\t\t\t\t|null\nsigningConfig    \t\t|android.signingConfigs.debug\t\t|null\nzipAlign    \t\t\t|false    \t\t\t\t\t\t\t|true\nrunProguard    \t\t\t|false\t\t\t\t\t\t\t\t|false\nproguardFile    \t\t|N/A (set only)\t\t\t\t\t\t|N/A (set only)\nproguardFiles    \t\t|N/A (set only)\t\t\t\t\t\t|N/A (set only)\n\n除了以上属性之外，Build Type还会受项目源码和资源影响：\n对于每一个Build Type都会自动创建一个匹配的sourceSet。默认的路径为：`src/<buildtypename>/  `\n这意味着BuildType名称不能是main或者androidTest（因为这两个是由plugin强制实现的），并且他们互相之间都必须是唯一的\n\n\n## ProductFlavors（不同定制的产品）\n一个product flavor定义了从项目中构建了一个应用的自定义版本。一个单一的项目可以同时定义多个不同的flavor来改变应用的输出。\n\n*注意：flavor的命名不能与已存在的Build Type或者androidTest这个sourceSet有冲突。*\n\nProduct flavor需要在productFlavors这个DSL容器中声明：\n```\n productFlavors {\n        gpInter {\n        }\n\n        ngpPackage {\n        }\n```\n\n\n## 配置不同包名&&控制不同渠道变量\n\n```\n\n productFlavors {\n\n        gpInter {\n            applicationId \"com.gkt.wowgames\"\n            manifestPlaceholders = [PUSH_APP_ID: \"app_gkt_gamebar_all_7328\", PUSH_APP_SECRET: \"a8204a34bd0b\", ANALYTICS_ID: \"UA-74197659-4\", FB_ID: \"1057899667608168\"]\n            buildConfigField(\"boolean\", \"use_facebook\", \"true\")\n            buildConfigField(\"boolean\", \"use_adjust\", \"false\")\n        }\n\n        ngpPackage {\n\n            applicationId \"com.gkt.wowgames.ngp\"\n            versionCode 1\n            versionName \"1.0.0\"\n            manifestPlaceholders = [PUSH_APP_ID: \"app_gkt_gamebar_all_sg_1007\", PUSH_APP_SECRET: \"9ee9422f9e03\", ANALYTICS_ID: \"UA-74197659-10\",FB_ID: \"1057899667608168\"]\n            buildConfigField(\"boolean\", \"use_facebook\", \"false\")\n            buildConfigField(\"boolean\", \"use_adjust\", \"true\")\n        }\n```\n\n## 使用不同应用名\n\n## 使用不同的Manifest\n\nManifest可以通过Merge的方式合并多个Manifest源。通常来说，有三种类型manifest文件需要被merge到最终的结果apk，下面是按照优先权排序：\n\n\n\n1. productFlavors和buildTypes中指定的manifest.xml\n\n2. 应用主manifest.xml\n\n3. 库manifest\n\n\n\n\n\nMerge的方式是指将manifest中每个元素和子元素的节点属性进行合并，Gradle提供manifestPlaceholders属性，可以在AndroidManifest中定义一个变量，在build.gradle中动态的替换掉\n\nexample：\n\n```\n\n  manifestPlaceholders = [PUSH_APP_ID: \"app_gkt_gamebar_all_7328\", PUSH_APP_SECRET: \"a8204a34bd0b\", ANALYTICS_ID: \"UA-74197659-4\", FB_ID: \"1057899667608168\"]\n\n```\n\n```\n        <meta-data\n            android:name=\"Push_AppId\"\n            android:value=\"${push_app_id}\" />\n        <meta-data\n            android:name=\"Push_AppSecret\"\n            android:value=\"${push_app_secret}\" />\n        <meta-data\n            android:name=\"com.facebook.sdk.ApplicationId\"\n            android:value=\"${FB_ID}\" />\n        <meta-data\n            android:name=\"AnalyticsTrackId\"\n            android:value=\"${ANALYTICS_ID}\" />\n```\n\n## 配置不同Icon\n\n\n\n\n\n\n\n## 配置不同信鸽ID\n\n```\n        <action android:name=\"${applicationId}.PUSH_ACTION\" />\n```\n\n## Sourcesets and Dependencies（源组件和依赖关系）\n\n与Build Type类似，Product Flavor也会通过它们自己的sourceSet提供代码和资源。\n\n上面的例子将会创建4个sourceSet\n\n* android.sourceSets.flavor1：位于src/flavor1/\n* android.sourceSets.flavor2：位于src/flavor2/\n* android.sourceSets.androidTestFlavor1：位于src/androidTestFlavor1/\n* android.sourceSets.androidTestFlavor2：位于src/androidTestFlavor2/\n\n这些sourceSet用于与android.sourceSets.main和Build Type的sourceSet来构建APK。\n\n下面的规则用于处理所有使用的sourceSet来构建一个APK：\n\n* 多个文件夹中的所有的源代码（src/../java）都会合并起来生成一个输出。\n* 所有的Manifest文件都会合并成一个Manifest文件。类似于Build Type，允许Product Flavor可以拥有不同的的组件和权限声明。\n* 所有使用的资源（Android res和assets）遵循的优先级为Build Type会覆盖Product Flavor，最终覆盖main sourceSet的资源。\n* 每一个Build Variant都会根据资源生成自己的R类（或者其它一些源代码）。Variant互相之间没有什么是共享的。\n\n最终，类似Build Type，Product Flavor也可以有它们自己的依赖关系。例如，如果使用flavor来生成一个基于广告的应用版本和一个付费的应用版本，其中广告版本可能需要依赖于一个广告SDK，但是另一个不需要。\n\n## Build Type  + Product Flavor = Build Variant（构建类型+定制产品=构建变种版本）\n* 每一个Build Type都会生成一个新的APK.\n* Product Flavor同样也会做这些事情：项目的输出将会拼接所有可能的Build Type和Product Flavor（如果有Flavor定义存在的话）的组合。\n* 每一种组合（包含Build Type和Product Flavor）就是一个Build Variant（构建变种版本）。\n\n## Gradle SDL 属性分析\nAndroid plugin提供了大量DSL属性用于直接从构建系统定制大部分操作。\n\nName                          |介绍\n------------------------------|----------------------------------------------------\ndefaultConfig{}               |默认配置，是ProductFlavor类型。它共享给其他ProductFlavor使用\nsourceSets{}\t\t\t\t  |源文件目录设置，是AndroidSourceSet类型。\nbuildTypes{ }\t\t\t\t  |BuildType类型\nsigningConfigs{ }             |签名配置，SigningConfig类型\nproductFlavors{ }             |产品风格配置，ProductFlavor类型\ntestOptions{ }                |测试配置，TestOptions类型\naaptOptions{ }                |aapt配置，AaptOptions类型\nlintOptions{ }                |lint配置，LintOptions类型\ndexOptions{ }                 |dex配置，DexOptions类型\ncompileOptions{ }             |编译配置，CompileOptions类型\npackagingOptions{ }           |PackagingOptions类型\njacoco{ }                     |JacocoExtension类型。 用于设定 jacoco版本\nsplits{ }                     |Splits类型\n\n","source":"_posts/AndroidGradle自动化打包.md","raw":"---\ntitle: AndroidStudio Gradle 自动化打包\ndate: 2016-10-6 08:55:29   \ncategories: 任垣宇   \ntag: Android \ntoc: true  \n---\n\n## Gradle打包优势\n因为部门业务的性质，APP产品需要对应多个渠道，多个国家输出不同需求，甚至不同支付逻辑的Apk版本，以前部门为了应对需求，采用的策略是一个APP产品对应渠道，国家开多套源码的分支，每一次打包需求过来，不同分支的APP首先便是要升级SDK，然后可能会将一些在别的分支上已经实现的逻辑拷贝到这个分支上，目前部门的APP产品信息记录在禅道文档已经更新到了65个，而部门APP产品（星座、FC、LookerPlus、Wallpaper、WallpaperCutey、Gamebar、ToolBox、SmartLocker、AppLocker、电池卫视、内存医生、WiFi增强器VideoPlus）等十三个独立App，平均每个APP存在6个版本的源码，除去破解产品本身特殊没办法统一源码，正式自研产品的版本也相当之多，现在每次打包拉源代码分支、替换包名、更换各项ID、升级SDK、测试等流程走一遍平均需要4小时左右，效率比较低下，也比较容易疏忽出错。而AndroidStudio Gradle打包方式能够实现一个自研App产品维护一套源码，输出多个渠道、用途的Apk包，能极大提升开发打包的效率、减少出错的可能性。\n\n<!--more-->\n\n## Gradle打包能够实现什么\n1. 能够输出多渠道、多国家版本。\n2. 针对性的输出Debug、dev版本、收费免费版本，输出的包名不一致能够同时安装到手机上测试。\n3. 请求Api与Sandbox不同的服务器接口，例如Wallpaper和WallpaperCutey请求不同的图片资源接口。\n4. 不同apk需要应用名不同，图标不同，某些常量不同。\n\n## Gradle基本概念\n* Gradle是一种依赖管理工具，基于Groovy语言，面向Java应用为主，它抛弃了基于XML的各种繁琐配置，取而代之的是一种基于Groovy的内部领域特定（DSL）语言。\n* 在build.gradle(modul)文件的android节点下defaultConfig属性下定义默认项目配置\n* gradle使用applicationId属性来配置manifest中的packageName属性，目的是为了消除在App包名与java包名相似引起的混乱。\n* gradle构建是动态的，可以从自定义的逻辑代码中读取App版本信息\n\n## 通过Gradle导入第三方依赖项目优势\n* gradle导入jar包更方便，一行代码即可搞定。不像后者那样还要自己去官方下载。\n* 如果官方将jar包更新了，我们只需要在build.gradle中改一下版本号就行了，不用重新去官网下载。\n* jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优，所有通过gradle导入的jar包都是从http://bintray.com/bintray/jcenter 这个中央仓库上扒下来的。如果你需要的jar包在这个网站上没有，那就无法通过gradle的方式来导入，还需以前一样自行加入到项目中并依赖。\n\n## 签名打包的两种方式\n1. 通过Android Studio进行签名\n2. 通过命令行的方式进行签名\n\n## BuildType（构建类型）\nAndroidStudio创建新工程时默认会给工程自动构建工程的debug和release版本，Android plugin允许像创建其他构建类型一样定制debug和release实例，这需要在buildTypes的DSL容器中配置：\n```\nandroid {\n    buildTypes {\n        debug {\n            applicationIdSuffix \".debug\"\n        }\n        jnidebug.initWith(buildTypes.debug)\n        jnidebug {\n            packageNameSuffix \".jnidebug\"\n            jnidebugBuild true\n        }\n    }\n}\n```\n以上代码片段实现了以下功能：\n* 配置默认的debug构建类型：将debug版本的包名设置为<app package>.debug以便能够同时在一台设备上安装debug和release版本的apk。\n* 创建了一个名为“jnidebug”的新构建类型，并且这个构建类型是debug构建类型的一个副本。\n* 继续配置jnidebug构建类型，允许使用JNI组件，并且也添加了不一样的包名后缀。\n\n创建一个新的构建类型就是简单的在buildType标签下添加一个新的元素，并且可以使用initWith()或者直接使用闭包来配置它。\n\n以下是一些可能使用到的属性和默认值：\n\n\nProperty name\t|Default values for debug\t|Default values for release/other\n------------------------|-----------------------------------|-----------------------\ndebuggable    \t\t\t|debuggable    \t\t\t\t\t\t|false\njniDebugBuild    \t\t|false\t\t\t\t\t\t\t\t|false\nrenderscriptDebugBuild  |false\t\t\t\t\t\t\t\t|false\nrenderscriptOptimLevel  |3\t\t\t\t\t\t\t\t\t|3\npackageNameSuffix    \t|null\t\t\t\t\t\t\t\t|null\nversionNameSuffix    \t|null\t\t\t\t\t\t\t\t|null\nsigningConfig    \t\t|android.signingConfigs.debug\t\t|null\nzipAlign    \t\t\t|false    \t\t\t\t\t\t\t|true\nrunProguard    \t\t\t|false\t\t\t\t\t\t\t\t|false\nproguardFile    \t\t|N/A (set only)\t\t\t\t\t\t|N/A (set only)\nproguardFiles    \t\t|N/A (set only)\t\t\t\t\t\t|N/A (set only)\n\n除了以上属性之外，Build Type还会受项目源码和资源影响：\n对于每一个Build Type都会自动创建一个匹配的sourceSet。默认的路径为：`src/<buildtypename>/  `\n这意味着BuildType名称不能是main或者androidTest（因为这两个是由plugin强制实现的），并且他们互相之间都必须是唯一的\n\n\n## ProductFlavors（不同定制的产品）\n一个product flavor定义了从项目中构建了一个应用的自定义版本。一个单一的项目可以同时定义多个不同的flavor来改变应用的输出。\n\n*注意：flavor的命名不能与已存在的Build Type或者androidTest这个sourceSet有冲突。*\n\nProduct flavor需要在productFlavors这个DSL容器中声明：\n```\n productFlavors {\n        gpInter {\n        }\n\n        ngpPackage {\n        }\n```\n\n\n## 配置不同包名&&控制不同渠道变量\n\n```\n\n productFlavors {\n\n        gpInter {\n            applicationId \"com.gkt.wowgames\"\n            manifestPlaceholders = [PUSH_APP_ID: \"app_gkt_gamebar_all_7328\", PUSH_APP_SECRET: \"a8204a34bd0b\", ANALYTICS_ID: \"UA-74197659-4\", FB_ID: \"1057899667608168\"]\n            buildConfigField(\"boolean\", \"use_facebook\", \"true\")\n            buildConfigField(\"boolean\", \"use_adjust\", \"false\")\n        }\n\n        ngpPackage {\n\n            applicationId \"com.gkt.wowgames.ngp\"\n            versionCode 1\n            versionName \"1.0.0\"\n            manifestPlaceholders = [PUSH_APP_ID: \"app_gkt_gamebar_all_sg_1007\", PUSH_APP_SECRET: \"9ee9422f9e03\", ANALYTICS_ID: \"UA-74197659-10\",FB_ID: \"1057899667608168\"]\n            buildConfigField(\"boolean\", \"use_facebook\", \"false\")\n            buildConfigField(\"boolean\", \"use_adjust\", \"true\")\n        }\n```\n\n## 使用不同应用名\n\n## 使用不同的Manifest\n\nManifest可以通过Merge的方式合并多个Manifest源。通常来说，有三种类型manifest文件需要被merge到最终的结果apk，下面是按照优先权排序：\n\n\n\n1. productFlavors和buildTypes中指定的manifest.xml\n\n2. 应用主manifest.xml\n\n3. 库manifest\n\n\n\n\n\nMerge的方式是指将manifest中每个元素和子元素的节点属性进行合并，Gradle提供manifestPlaceholders属性，可以在AndroidManifest中定义一个变量，在build.gradle中动态的替换掉\n\nexample：\n\n```\n\n  manifestPlaceholders = [PUSH_APP_ID: \"app_gkt_gamebar_all_7328\", PUSH_APP_SECRET: \"a8204a34bd0b\", ANALYTICS_ID: \"UA-74197659-4\", FB_ID: \"1057899667608168\"]\n\n```\n\n```\n        <meta-data\n            android:name=\"Push_AppId\"\n            android:value=\"${push_app_id}\" />\n        <meta-data\n            android:name=\"Push_AppSecret\"\n            android:value=\"${push_app_secret}\" />\n        <meta-data\n            android:name=\"com.facebook.sdk.ApplicationId\"\n            android:value=\"${FB_ID}\" />\n        <meta-data\n            android:name=\"AnalyticsTrackId\"\n            android:value=\"${ANALYTICS_ID}\" />\n```\n\n## 配置不同Icon\n\n\n\n\n\n\n\n## 配置不同信鸽ID\n\n```\n        <action android:name=\"${applicationId}.PUSH_ACTION\" />\n```\n\n## Sourcesets and Dependencies（源组件和依赖关系）\n\n与Build Type类似，Product Flavor也会通过它们自己的sourceSet提供代码和资源。\n\n上面的例子将会创建4个sourceSet\n\n* android.sourceSets.flavor1：位于src/flavor1/\n* android.sourceSets.flavor2：位于src/flavor2/\n* android.sourceSets.androidTestFlavor1：位于src/androidTestFlavor1/\n* android.sourceSets.androidTestFlavor2：位于src/androidTestFlavor2/\n\n这些sourceSet用于与android.sourceSets.main和Build Type的sourceSet来构建APK。\n\n下面的规则用于处理所有使用的sourceSet来构建一个APK：\n\n* 多个文件夹中的所有的源代码（src/../java）都会合并起来生成一个输出。\n* 所有的Manifest文件都会合并成一个Manifest文件。类似于Build Type，允许Product Flavor可以拥有不同的的组件和权限声明。\n* 所有使用的资源（Android res和assets）遵循的优先级为Build Type会覆盖Product Flavor，最终覆盖main sourceSet的资源。\n* 每一个Build Variant都会根据资源生成自己的R类（或者其它一些源代码）。Variant互相之间没有什么是共享的。\n\n最终，类似Build Type，Product Flavor也可以有它们自己的依赖关系。例如，如果使用flavor来生成一个基于广告的应用版本和一个付费的应用版本，其中广告版本可能需要依赖于一个广告SDK，但是另一个不需要。\n\n## Build Type  + Product Flavor = Build Variant（构建类型+定制产品=构建变种版本）\n* 每一个Build Type都会生成一个新的APK.\n* Product Flavor同样也会做这些事情：项目的输出将会拼接所有可能的Build Type和Product Flavor（如果有Flavor定义存在的话）的组合。\n* 每一种组合（包含Build Type和Product Flavor）就是一个Build Variant（构建变种版本）。\n\n## Gradle SDL 属性分析\nAndroid plugin提供了大量DSL属性用于直接从构建系统定制大部分操作。\n\nName                          |介绍\n------------------------------|----------------------------------------------------\ndefaultConfig{}               |默认配置，是ProductFlavor类型。它共享给其他ProductFlavor使用\nsourceSets{}\t\t\t\t  |源文件目录设置，是AndroidSourceSet类型。\nbuildTypes{ }\t\t\t\t  |BuildType类型\nsigningConfigs{ }             |签名配置，SigningConfig类型\nproductFlavors{ }             |产品风格配置，ProductFlavor类型\ntestOptions{ }                |测试配置，TestOptions类型\naaptOptions{ }                |aapt配置，AaptOptions类型\nlintOptions{ }                |lint配置，LintOptions类型\ndexOptions{ }                 |dex配置，DexOptions类型\ncompileOptions{ }             |编译配置，CompileOptions类型\npackagingOptions{ }           |PackagingOptions类型\njacoco{ }                     |JacocoExtension类型。 用于设定 jacoco版本\nsplits{ }                     |Splits类型\n\n","slug":"AndroidGradle自动化打包","published":1,"updated":"2016-10-08T11:25:58.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu147tvb00063omnvv43or68","content":"<h2 id=\"Gradle打包优势\"><a href=\"#Gradle打包优势\" class=\"headerlink\" title=\"Gradle打包优势\"></a>Gradle打包优势</h2><p>因为部门业务的性质，APP产品需要对应多个渠道，多个国家输出不同需求，甚至不同支付逻辑的Apk版本，以前部门为了应对需求，采用的策略是一个APP产品对应渠道，国家开多套源码的分支，每一次打包需求过来，不同分支的APP首先便是要升级SDK，然后可能会将一些在别的分支上已经实现的逻辑拷贝到这个分支上，目前部门的APP产品信息记录在禅道文档已经更新到了65个，而部门APP产品（星座、FC、LookerPlus、Wallpaper、WallpaperCutey、Gamebar、ToolBox、SmartLocker、AppLocker、电池卫视、内存医生、WiFi增强器VideoPlus）等十三个独立App，平均每个APP存在6个版本的源码，除去破解产品本身特殊没办法统一源码，正式自研产品的版本也相当之多，现在每次打包拉源代码分支、替换包名、更换各项ID、升级SDK、测试等流程走一遍平均需要4小时左右，效率比较低下，也比较容易疏忽出错。而AndroidStudio Gradle打包方式能够实现一个自研App产品维护一套源码，输出多个渠道、用途的Apk包，能极大提升开发打包的效率、减少出错的可能性。</p>\n<a id=\"more\"></a>\n<h2 id=\"Gradle打包能够实现什么\"><a href=\"#Gradle打包能够实现什么\" class=\"headerlink\" title=\"Gradle打包能够实现什么\"></a>Gradle打包能够实现什么</h2><ol>\n<li>能够输出多渠道、多国家版本。</li>\n<li>针对性的输出Debug、dev版本、收费免费版本，输出的包名不一致能够同时安装到手机上测试。</li>\n<li>请求Api与Sandbox不同的服务器接口，例如Wallpaper和WallpaperCutey请求不同的图片资源接口。</li>\n<li>不同apk需要应用名不同，图标不同，某些常量不同。</li>\n</ol>\n<h2 id=\"Gradle基本概念\"><a href=\"#Gradle基本概念\" class=\"headerlink\" title=\"Gradle基本概念\"></a>Gradle基本概念</h2><ul>\n<li>Gradle是一种依赖管理工具，基于Groovy语言，面向Java应用为主，它抛弃了基于XML的各种繁琐配置，取而代之的是一种基于Groovy的内部领域特定（DSL）语言。</li>\n<li>在build.gradle(modul)文件的android节点下defaultConfig属性下定义默认项目配置</li>\n<li>gradle使用applicationId属性来配置manifest中的packageName属性，目的是为了消除在App包名与java包名相似引起的混乱。</li>\n<li>gradle构建是动态的，可以从自定义的逻辑代码中读取App版本信息</li>\n</ul>\n<h2 id=\"通过Gradle导入第三方依赖项目优势\"><a href=\"#通过Gradle导入第三方依赖项目优势\" class=\"headerlink\" title=\"通过Gradle导入第三方依赖项目优势\"></a>通过Gradle导入第三方依赖项目优势</h2><ul>\n<li>gradle导入jar包更方便，一行代码即可搞定。不像后者那样还要自己去官方下载。</li>\n<li>如果官方将jar包更新了，我们只需要在build.gradle中改一下版本号就行了，不用重新去官网下载。</li>\n<li>jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优，所有通过gradle导入的jar包都是从<a href=\"http://bintray.com/bintray/jcenter\" target=\"_blank\" rel=\"external\">http://bintray.com/bintray/jcenter</a> 这个中央仓库上扒下来的。如果你需要的jar包在这个网站上没有，那就无法通过gradle的方式来导入，还需以前一样自行加入到项目中并依赖。</li>\n</ul>\n<h2 id=\"签名打包的两种方式\"><a href=\"#签名打包的两种方式\" class=\"headerlink\" title=\"签名打包的两种方式\"></a>签名打包的两种方式</h2><ol>\n<li>通过Android Studio进行签名</li>\n<li>通过命令行的方式进行签名</li>\n</ol>\n<h2 id=\"BuildType（构建类型）\"><a href=\"#BuildType（构建类型）\" class=\"headerlink\" title=\"BuildType（构建类型）\"></a>BuildType（构建类型）</h2><p>AndroidStudio创建新工程时默认会给工程自动构建工程的debug和release版本，Android plugin允许像创建其他构建类型一样定制debug和release实例，这需要在buildTypes的DSL容器中配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">        debug &#123;</div><div class=\"line\">            applicationIdSuffix &quot;.debug&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">        jnidebug.initWith(buildTypes.debug)</div><div class=\"line\">        jnidebug &#123;</div><div class=\"line\">            packageNameSuffix &quot;.jnidebug&quot;</div><div class=\"line\">            jnidebugBuild true</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上代码片段实现了以下功能：</p>\n<ul>\n<li>配置默认的debug构建类型：将debug版本的包名设置为<app package=\"\">.debug以便能够同时在一台设备上安装debug和release版本的apk。</app></li>\n<li>创建了一个名为“jnidebug”的新构建类型，并且这个构建类型是debug构建类型的一个副本。</li>\n<li>继续配置jnidebug构建类型，允许使用JNI组件，并且也添加了不一样的包名后缀。</li>\n</ul>\n<p>创建一个新的构建类型就是简单的在buildType标签下添加一个新的元素，并且可以使用initWith()或者直接使用闭包来配置它。</p>\n<p>以下是一些可能使用到的属性和默认值：</p>\n<table>\n<thead>\n<tr>\n<th>Property name</th>\n<th>Default values for debug</th>\n<th>Default values for release/other</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>debuggable</td>\n<td>debuggable</td>\n<td>false</td>\n</tr>\n<tr>\n<td>jniDebugBuild</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>renderscriptDebugBuild</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>renderscriptOptimLevel</td>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>packageNameSuffix</td>\n<td>null</td>\n<td>null</td>\n</tr>\n<tr>\n<td>versionNameSuffix</td>\n<td>null</td>\n<td>null</td>\n</tr>\n<tr>\n<td>signingConfig</td>\n<td>android.signingConfigs.debug</td>\n<td>null</td>\n</tr>\n<tr>\n<td>zipAlign</td>\n<td>false</td>\n<td>true</td>\n</tr>\n<tr>\n<td>runProguard</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>proguardFile</td>\n<td>N/A (set only)</td>\n<td>N/A (set only)</td>\n</tr>\n<tr>\n<td>proguardFiles</td>\n<td>N/A (set only)</td>\n<td>N/A (set only)</td>\n</tr>\n</tbody>\n</table>\n<p>除了以上属性之外，Build Type还会受项目源码和资源影响：<br>对于每一个Build Type都会自动创建一个匹配的sourceSet。默认的路径为：<code>src/&lt;buildtypename&gt;/</code><br>这意味着BuildType名称不能是main或者androidTest（因为这两个是由plugin强制实现的），并且他们互相之间都必须是唯一的</p>\n<h2 id=\"ProductFlavors（不同定制的产品）\"><a href=\"#ProductFlavors（不同定制的产品）\" class=\"headerlink\" title=\"ProductFlavors（不同定制的产品）\"></a>ProductFlavors（不同定制的产品）</h2><p>一个product flavor定义了从项目中构建了一个应用的自定义版本。一个单一的项目可以同时定义多个不同的flavor来改变应用的输出。</p>\n<p><em>注意：flavor的命名不能与已存在的Build Type或者androidTest这个sourceSet有冲突。</em></p>\n<p>Product flavor需要在productFlavors这个DSL容器中声明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">productFlavors &#123;</div><div class=\"line\">       gpInter &#123;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       ngpPackage &#123;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置不同包名-amp-amp-控制不同渠道变量\"><a href=\"#配置不同包名-amp-amp-控制不同渠道变量\" class=\"headerlink\" title=\"配置不同包名&amp;&amp;控制不同渠道变量\"></a>配置不同包名&amp;&amp;控制不同渠道变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">productFlavors &#123;</div><div class=\"line\"></div><div class=\"line\">       gpInter &#123;</div><div class=\"line\">           applicationId &quot;com.gkt.wowgames&quot;</div><div class=\"line\">           manifestPlaceholders = [PUSH_APP_ID: &quot;app_gkt_gamebar_all_7328&quot;, PUSH_APP_SECRET: &quot;a8204a34bd0b&quot;, ANALYTICS_ID: &quot;UA-74197659-4&quot;, FB_ID: &quot;1057899667608168&quot;]</div><div class=\"line\">           buildConfigField(&quot;boolean&quot;, &quot;use_facebook&quot;, &quot;true&quot;)</div><div class=\"line\">           buildConfigField(&quot;boolean&quot;, &quot;use_adjust&quot;, &quot;false&quot;)</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       ngpPackage &#123;</div><div class=\"line\"></div><div class=\"line\">           applicationId &quot;com.gkt.wowgames.ngp&quot;</div><div class=\"line\">           versionCode 1</div><div class=\"line\">           versionName &quot;1.0.0&quot;</div><div class=\"line\">           manifestPlaceholders = [PUSH_APP_ID: &quot;app_gkt_gamebar_all_sg_1007&quot;, PUSH_APP_SECRET: &quot;9ee9422f9e03&quot;, ANALYTICS_ID: &quot;UA-74197659-10&quot;,FB_ID: &quot;1057899667608168&quot;]</div><div class=\"line\">           buildConfigField(&quot;boolean&quot;, &quot;use_facebook&quot;, &quot;false&quot;)</div><div class=\"line\">           buildConfigField(&quot;boolean&quot;, &quot;use_adjust&quot;, &quot;true&quot;)</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"使用不同应用名\"><a href=\"#使用不同应用名\" class=\"headerlink\" title=\"使用不同应用名\"></a>使用不同应用名</h2><h2 id=\"使用不同的Manifest\"><a href=\"#使用不同的Manifest\" class=\"headerlink\" title=\"使用不同的Manifest\"></a>使用不同的Manifest</h2><p>Manifest可以通过Merge的方式合并多个Manifest源。通常来说，有三种类型manifest文件需要被merge到最终的结果apk，下面是按照优先权排序：</p>\n<ol>\n<li><p>productFlavors和buildTypes中指定的manifest.xml</p>\n</li>\n<li><p>应用主manifest.xml</p>\n</li>\n<li><p>库manifest</p>\n</li>\n</ol>\n<p>Merge的方式是指将manifest中每个元素和子元素的节点属性进行合并，Gradle提供manifestPlaceholders属性，可以在AndroidManifest中定义一个变量，在build.gradle中动态的替换掉</p>\n<p>example：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">manifestPlaceholders = [PUSH_APP_ID: &quot;app_gkt_gamebar_all_7328&quot;, PUSH_APP_SECRET: &quot;a8204a34bd0b&quot;, ANALYTICS_ID: &quot;UA-74197659-4&quot;, FB_ID: &quot;1057899667608168&quot;]</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta-data</div><div class=\"line\">    android:name=&quot;Push_AppId&quot;</div><div class=\"line\">    android:value=&quot;$&#123;push_app_id&#125;&quot; /&gt;</div><div class=\"line\">&lt;meta-data</div><div class=\"line\">    android:name=&quot;Push_AppSecret&quot;</div><div class=\"line\">    android:value=&quot;$&#123;push_app_secret&#125;&quot; /&gt;</div><div class=\"line\">&lt;meta-data</div><div class=\"line\">    android:name=&quot;com.facebook.sdk.ApplicationId&quot;</div><div class=\"line\">    android:value=&quot;$&#123;FB_ID&#125;&quot; /&gt;</div><div class=\"line\">&lt;meta-data</div><div class=\"line\">    android:name=&quot;AnalyticsTrackId&quot;</div><div class=\"line\">    android:value=&quot;$&#123;ANALYTICS_ID&#125;&quot; /&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"配置不同Icon\"><a href=\"#配置不同Icon\" class=\"headerlink\" title=\"配置不同Icon\"></a>配置不同Icon</h2><h2 id=\"配置不同信鸽ID\"><a href=\"#配置不同信鸽ID\" class=\"headerlink\" title=\"配置不同信鸽ID\"></a>配置不同信鸽ID</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;action android:name=&quot;$&#123;applicationId&#125;.PUSH_ACTION&quot; /&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Sourcesets-and-Dependencies（源组件和依赖关系）\"><a href=\"#Sourcesets-and-Dependencies（源组件和依赖关系）\" class=\"headerlink\" title=\"Sourcesets and Dependencies（源组件和依赖关系）\"></a>Sourcesets and Dependencies（源组件和依赖关系）</h2><p>与Build Type类似，Product Flavor也会通过它们自己的sourceSet提供代码和资源。</p>\n<p>上面的例子将会创建4个sourceSet</p>\n<ul>\n<li>android.sourceSets.flavor1：位于src/flavor1/</li>\n<li>android.sourceSets.flavor2：位于src/flavor2/</li>\n<li>android.sourceSets.androidTestFlavor1：位于src/androidTestFlavor1/</li>\n<li>android.sourceSets.androidTestFlavor2：位于src/androidTestFlavor2/</li>\n</ul>\n<p>这些sourceSet用于与android.sourceSets.main和Build Type的sourceSet来构建APK。</p>\n<p>下面的规则用于处理所有使用的sourceSet来构建一个APK：</p>\n<ul>\n<li>多个文件夹中的所有的源代码（src/../java）都会合并起来生成一个输出。</li>\n<li>所有的Manifest文件都会合并成一个Manifest文件。类似于Build Type，允许Product Flavor可以拥有不同的的组件和权限声明。</li>\n<li>所有使用的资源（Android res和assets）遵循的优先级为Build Type会覆盖Product Flavor，最终覆盖main sourceSet的资源。</li>\n<li>每一个Build Variant都会根据资源生成自己的R类（或者其它一些源代码）。Variant互相之间没有什么是共享的。</li>\n</ul>\n<p>最终，类似Build Type，Product Flavor也可以有它们自己的依赖关系。例如，如果使用flavor来生成一个基于广告的应用版本和一个付费的应用版本，其中广告版本可能需要依赖于一个广告SDK，但是另一个不需要。</p>\n<h2 id=\"Build-Type-Product-Flavor-Build-Variant（构建类型-定制产品-构建变种版本）\"><a href=\"#Build-Type-Product-Flavor-Build-Variant（构建类型-定制产品-构建变种版本）\" class=\"headerlink\" title=\"Build Type  + Product Flavor = Build Variant（构建类型+定制产品=构建变种版本）\"></a>Build Type  + Product Flavor = Build Variant（构建类型+定制产品=构建变种版本）</h2><ul>\n<li>每一个Build Type都会生成一个新的APK.</li>\n<li>Product Flavor同样也会做这些事情：项目的输出将会拼接所有可能的Build Type和Product Flavor（如果有Flavor定义存在的话）的组合。</li>\n<li>每一种组合（包含Build Type和Product Flavor）就是一个Build Variant（构建变种版本）。</li>\n</ul>\n<h2 id=\"Gradle-SDL-属性分析\"><a href=\"#Gradle-SDL-属性分析\" class=\"headerlink\" title=\"Gradle SDL 属性分析\"></a>Gradle SDL 属性分析</h2><p>Android plugin提供了大量DSL属性用于直接从构建系统定制大部分操作。</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultConfig{}</td>\n<td>默认配置，是ProductFlavor类型。它共享给其他ProductFlavor使用</td>\n</tr>\n<tr>\n<td>sourceSets{}</td>\n<td>源文件目录设置，是AndroidSourceSet类型。</td>\n</tr>\n<tr>\n<td>buildTypes{ }</td>\n<td>BuildType类型</td>\n</tr>\n<tr>\n<td>signingConfigs{ }</td>\n<td>签名配置，SigningConfig类型</td>\n</tr>\n<tr>\n<td>productFlavors{ }</td>\n<td>产品风格配置，ProductFlavor类型</td>\n</tr>\n<tr>\n<td>testOptions{ }</td>\n<td>测试配置，TestOptions类型</td>\n</tr>\n<tr>\n<td>aaptOptions{ }</td>\n<td>aapt配置，AaptOptions类型</td>\n</tr>\n<tr>\n<td>lintOptions{ }</td>\n<td>lint配置，LintOptions类型</td>\n</tr>\n<tr>\n<td>dexOptions{ }</td>\n<td>dex配置，DexOptions类型</td>\n</tr>\n<tr>\n<td>compileOptions{ }</td>\n<td>编译配置，CompileOptions类型</td>\n</tr>\n<tr>\n<td>packagingOptions{ }</td>\n<td>PackagingOptions类型</td>\n</tr>\n<tr>\n<td>jacoco{ }</td>\n<td>JacocoExtension类型。 用于设定 jacoco版本</td>\n</tr>\n<tr>\n<td>splits{ }</td>\n<td>Splits类型</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<h2 id=\"Gradle打包优势\"><a href=\"#Gradle打包优势\" class=\"headerlink\" title=\"Gradle打包优势\"></a>Gradle打包优势</h2><p>因为部门业务的性质，APP产品需要对应多个渠道，多个国家输出不同需求，甚至不同支付逻辑的Apk版本，以前部门为了应对需求，采用的策略是一个APP产品对应渠道，国家开多套源码的分支，每一次打包需求过来，不同分支的APP首先便是要升级SDK，然后可能会将一些在别的分支上已经实现的逻辑拷贝到这个分支上，目前部门的APP产品信息记录在禅道文档已经更新到了65个，而部门APP产品（星座、FC、LookerPlus、Wallpaper、WallpaperCutey、Gamebar、ToolBox、SmartLocker、AppLocker、电池卫视、内存医生、WiFi增强器VideoPlus）等十三个独立App，平均每个APP存在6个版本的源码，除去破解产品本身特殊没办法统一源码，正式自研产品的版本也相当之多，现在每次打包拉源代码分支、替换包名、更换各项ID、升级SDK、测试等流程走一遍平均需要4小时左右，效率比较低下，也比较容易疏忽出错。而AndroidStudio Gradle打包方式能够实现一个自研App产品维护一套源码，输出多个渠道、用途的Apk包，能极大提升开发打包的效率、减少出错的可能性。</p>","more":"<h2 id=\"Gradle打包能够实现什么\"><a href=\"#Gradle打包能够实现什么\" class=\"headerlink\" title=\"Gradle打包能够实现什么\"></a>Gradle打包能够实现什么</h2><ol>\n<li>能够输出多渠道、多国家版本。</li>\n<li>针对性的输出Debug、dev版本、收费免费版本，输出的包名不一致能够同时安装到手机上测试。</li>\n<li>请求Api与Sandbox不同的服务器接口，例如Wallpaper和WallpaperCutey请求不同的图片资源接口。</li>\n<li>不同apk需要应用名不同，图标不同，某些常量不同。</li>\n</ol>\n<h2 id=\"Gradle基本概念\"><a href=\"#Gradle基本概念\" class=\"headerlink\" title=\"Gradle基本概念\"></a>Gradle基本概念</h2><ul>\n<li>Gradle是一种依赖管理工具，基于Groovy语言，面向Java应用为主，它抛弃了基于XML的各种繁琐配置，取而代之的是一种基于Groovy的内部领域特定（DSL）语言。</li>\n<li>在build.gradle(modul)文件的android节点下defaultConfig属性下定义默认项目配置</li>\n<li>gradle使用applicationId属性来配置manifest中的packageName属性，目的是为了消除在App包名与java包名相似引起的混乱。</li>\n<li>gradle构建是动态的，可以从自定义的逻辑代码中读取App版本信息</li>\n</ul>\n<h2 id=\"通过Gradle导入第三方依赖项目优势\"><a href=\"#通过Gradle导入第三方依赖项目优势\" class=\"headerlink\" title=\"通过Gradle导入第三方依赖项目优势\"></a>通过Gradle导入第三方依赖项目优势</h2><ul>\n<li>gradle导入jar包更方便，一行代码即可搞定。不像后者那样还要自己去官方下载。</li>\n<li>如果官方将jar包更新了，我们只需要在build.gradle中改一下版本号就行了，不用重新去官网下载。</li>\n<li>jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优，所有通过gradle导入的jar包都是从<a href=\"http://bintray.com/bintray/jcenter\">http://bintray.com/bintray/jcenter</a> 这个中央仓库上扒下来的。如果你需要的jar包在这个网站上没有，那就无法通过gradle的方式来导入，还需以前一样自行加入到项目中并依赖。</li>\n</ul>\n<h2 id=\"签名打包的两种方式\"><a href=\"#签名打包的两种方式\" class=\"headerlink\" title=\"签名打包的两种方式\"></a>签名打包的两种方式</h2><ol>\n<li>通过Android Studio进行签名</li>\n<li>通过命令行的方式进行签名</li>\n</ol>\n<h2 id=\"BuildType（构建类型）\"><a href=\"#BuildType（构建类型）\" class=\"headerlink\" title=\"BuildType（构建类型）\"></a>BuildType（构建类型）</h2><p>AndroidStudio创建新工程时默认会给工程自动构建工程的debug和release版本，Android plugin允许像创建其他构建类型一样定制debug和release实例，这需要在buildTypes的DSL容器中配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">        debug &#123;</div><div class=\"line\">            applicationIdSuffix &quot;.debug&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">        jnidebug.initWith(buildTypes.debug)</div><div class=\"line\">        jnidebug &#123;</div><div class=\"line\">            packageNameSuffix &quot;.jnidebug&quot;</div><div class=\"line\">            jnidebugBuild true</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上代码片段实现了以下功能：</p>\n<ul>\n<li>配置默认的debug构建类型：将debug版本的包名设置为<app package>.debug以便能够同时在一台设备上安装debug和release版本的apk。</li>\n<li>创建了一个名为“jnidebug”的新构建类型，并且这个构建类型是debug构建类型的一个副本。</li>\n<li>继续配置jnidebug构建类型，允许使用JNI组件，并且也添加了不一样的包名后缀。</li>\n</ul>\n<p>创建一个新的构建类型就是简单的在buildType标签下添加一个新的元素，并且可以使用initWith()或者直接使用闭包来配置它。</p>\n<p>以下是一些可能使用到的属性和默认值：</p>\n<table>\n<thead>\n<tr>\n<th>Property name</th>\n<th>Default values for debug</th>\n<th>Default values for release/other</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>debuggable</td>\n<td>debuggable</td>\n<td>false</td>\n</tr>\n<tr>\n<td>jniDebugBuild</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>renderscriptDebugBuild</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>renderscriptOptimLevel</td>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>packageNameSuffix</td>\n<td>null</td>\n<td>null</td>\n</tr>\n<tr>\n<td>versionNameSuffix</td>\n<td>null</td>\n<td>null</td>\n</tr>\n<tr>\n<td>signingConfig</td>\n<td>android.signingConfigs.debug</td>\n<td>null</td>\n</tr>\n<tr>\n<td>zipAlign</td>\n<td>false</td>\n<td>true</td>\n</tr>\n<tr>\n<td>runProguard</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>proguardFile</td>\n<td>N/A (set only)</td>\n<td>N/A (set only)</td>\n</tr>\n<tr>\n<td>proguardFiles</td>\n<td>N/A (set only)</td>\n<td>N/A (set only)</td>\n</tr>\n</tbody>\n</table>\n<p>除了以上属性之外，Build Type还会受项目源码和资源影响：<br>对于每一个Build Type都会自动创建一个匹配的sourceSet。默认的路径为：<code>src/&lt;buildtypename&gt;/</code><br>这意味着BuildType名称不能是main或者androidTest（因为这两个是由plugin强制实现的），并且他们互相之间都必须是唯一的</p>\n<h2 id=\"ProductFlavors（不同定制的产品）\"><a href=\"#ProductFlavors（不同定制的产品）\" class=\"headerlink\" title=\"ProductFlavors（不同定制的产品）\"></a>ProductFlavors（不同定制的产品）</h2><p>一个product flavor定义了从项目中构建了一个应用的自定义版本。一个单一的项目可以同时定义多个不同的flavor来改变应用的输出。</p>\n<p><em>注意：flavor的命名不能与已存在的Build Type或者androidTest这个sourceSet有冲突。</em></p>\n<p>Product flavor需要在productFlavors这个DSL容器中声明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">productFlavors &#123;</div><div class=\"line\">       gpInter &#123;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       ngpPackage &#123;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置不同包名-amp-amp-控制不同渠道变量\"><a href=\"#配置不同包名-amp-amp-控制不同渠道变量\" class=\"headerlink\" title=\"配置不同包名&amp;&amp;控制不同渠道变量\"></a>配置不同包名&amp;&amp;控制不同渠道变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">productFlavors &#123;</div><div class=\"line\"></div><div class=\"line\">       gpInter &#123;</div><div class=\"line\">           applicationId &quot;com.gkt.wowgames&quot;</div><div class=\"line\">           manifestPlaceholders = [PUSH_APP_ID: &quot;app_gkt_gamebar_all_7328&quot;, PUSH_APP_SECRET: &quot;a8204a34bd0b&quot;, ANALYTICS_ID: &quot;UA-74197659-4&quot;, FB_ID: &quot;1057899667608168&quot;]</div><div class=\"line\">           buildConfigField(&quot;boolean&quot;, &quot;use_facebook&quot;, &quot;true&quot;)</div><div class=\"line\">           buildConfigField(&quot;boolean&quot;, &quot;use_adjust&quot;, &quot;false&quot;)</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       ngpPackage &#123;</div><div class=\"line\"></div><div class=\"line\">           applicationId &quot;com.gkt.wowgames.ngp&quot;</div><div class=\"line\">           versionCode 1</div><div class=\"line\">           versionName &quot;1.0.0&quot;</div><div class=\"line\">           manifestPlaceholders = [PUSH_APP_ID: &quot;app_gkt_gamebar_all_sg_1007&quot;, PUSH_APP_SECRET: &quot;9ee9422f9e03&quot;, ANALYTICS_ID: &quot;UA-74197659-10&quot;,FB_ID: &quot;1057899667608168&quot;]</div><div class=\"line\">           buildConfigField(&quot;boolean&quot;, &quot;use_facebook&quot;, &quot;false&quot;)</div><div class=\"line\">           buildConfigField(&quot;boolean&quot;, &quot;use_adjust&quot;, &quot;true&quot;)</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"使用不同应用名\"><a href=\"#使用不同应用名\" class=\"headerlink\" title=\"使用不同应用名\"></a>使用不同应用名</h2><h2 id=\"使用不同的Manifest\"><a href=\"#使用不同的Manifest\" class=\"headerlink\" title=\"使用不同的Manifest\"></a>使用不同的Manifest</h2><p>Manifest可以通过Merge的方式合并多个Manifest源。通常来说，有三种类型manifest文件需要被merge到最终的结果apk，下面是按照优先权排序：</p>\n<ol>\n<li><p>productFlavors和buildTypes中指定的manifest.xml</p>\n</li>\n<li><p>应用主manifest.xml</p>\n</li>\n<li><p>库manifest</p>\n</li>\n</ol>\n<p>Merge的方式是指将manifest中每个元素和子元素的节点属性进行合并，Gradle提供manifestPlaceholders属性，可以在AndroidManifest中定义一个变量，在build.gradle中动态的替换掉</p>\n<p>example：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">manifestPlaceholders = [PUSH_APP_ID: &quot;app_gkt_gamebar_all_7328&quot;, PUSH_APP_SECRET: &quot;a8204a34bd0b&quot;, ANALYTICS_ID: &quot;UA-74197659-4&quot;, FB_ID: &quot;1057899667608168&quot;]</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta-data</div><div class=\"line\">    android:name=&quot;Push_AppId&quot;</div><div class=\"line\">    android:value=&quot;$&#123;push_app_id&#125;&quot; /&gt;</div><div class=\"line\">&lt;meta-data</div><div class=\"line\">    android:name=&quot;Push_AppSecret&quot;</div><div class=\"line\">    android:value=&quot;$&#123;push_app_secret&#125;&quot; /&gt;</div><div class=\"line\">&lt;meta-data</div><div class=\"line\">    android:name=&quot;com.facebook.sdk.ApplicationId&quot;</div><div class=\"line\">    android:value=&quot;$&#123;FB_ID&#125;&quot; /&gt;</div><div class=\"line\">&lt;meta-data</div><div class=\"line\">    android:name=&quot;AnalyticsTrackId&quot;</div><div class=\"line\">    android:value=&quot;$&#123;ANALYTICS_ID&#125;&quot; /&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"配置不同Icon\"><a href=\"#配置不同Icon\" class=\"headerlink\" title=\"配置不同Icon\"></a>配置不同Icon</h2><h2 id=\"配置不同信鸽ID\"><a href=\"#配置不同信鸽ID\" class=\"headerlink\" title=\"配置不同信鸽ID\"></a>配置不同信鸽ID</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;action android:name=&quot;$&#123;applicationId&#125;.PUSH_ACTION&quot; /&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Sourcesets-and-Dependencies（源组件和依赖关系）\"><a href=\"#Sourcesets-and-Dependencies（源组件和依赖关系）\" class=\"headerlink\" title=\"Sourcesets and Dependencies（源组件和依赖关系）\"></a>Sourcesets and Dependencies（源组件和依赖关系）</h2><p>与Build Type类似，Product Flavor也会通过它们自己的sourceSet提供代码和资源。</p>\n<p>上面的例子将会创建4个sourceSet</p>\n<ul>\n<li>android.sourceSets.flavor1：位于src/flavor1/</li>\n<li>android.sourceSets.flavor2：位于src/flavor2/</li>\n<li>android.sourceSets.androidTestFlavor1：位于src/androidTestFlavor1/</li>\n<li>android.sourceSets.androidTestFlavor2：位于src/androidTestFlavor2/</li>\n</ul>\n<p>这些sourceSet用于与android.sourceSets.main和Build Type的sourceSet来构建APK。</p>\n<p>下面的规则用于处理所有使用的sourceSet来构建一个APK：</p>\n<ul>\n<li>多个文件夹中的所有的源代码（src/../java）都会合并起来生成一个输出。</li>\n<li>所有的Manifest文件都会合并成一个Manifest文件。类似于Build Type，允许Product Flavor可以拥有不同的的组件和权限声明。</li>\n<li>所有使用的资源（Android res和assets）遵循的优先级为Build Type会覆盖Product Flavor，最终覆盖main sourceSet的资源。</li>\n<li>每一个Build Variant都会根据资源生成自己的R类（或者其它一些源代码）。Variant互相之间没有什么是共享的。</li>\n</ul>\n<p>最终，类似Build Type，Product Flavor也可以有它们自己的依赖关系。例如，如果使用flavor来生成一个基于广告的应用版本和一个付费的应用版本，其中广告版本可能需要依赖于一个广告SDK，但是另一个不需要。</p>\n<h2 id=\"Build-Type-Product-Flavor-Build-Variant（构建类型-定制产品-构建变种版本）\"><a href=\"#Build-Type-Product-Flavor-Build-Variant（构建类型-定制产品-构建变种版本）\" class=\"headerlink\" title=\"Build Type  + Product Flavor = Build Variant（构建类型+定制产品=构建变种版本）\"></a>Build Type  + Product Flavor = Build Variant（构建类型+定制产品=构建变种版本）</h2><ul>\n<li>每一个Build Type都会生成一个新的APK.</li>\n<li>Product Flavor同样也会做这些事情：项目的输出将会拼接所有可能的Build Type和Product Flavor（如果有Flavor定义存在的话）的组合。</li>\n<li>每一种组合（包含Build Type和Product Flavor）就是一个Build Variant（构建变种版本）。</li>\n</ul>\n<h2 id=\"Gradle-SDL-属性分析\"><a href=\"#Gradle-SDL-属性分析\" class=\"headerlink\" title=\"Gradle SDL 属性分析\"></a>Gradle SDL 属性分析</h2><p>Android plugin提供了大量DSL属性用于直接从构建系统定制大部分操作。</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultConfig{}</td>\n<td>默认配置，是ProductFlavor类型。它共享给其他ProductFlavor使用</td>\n</tr>\n<tr>\n<td>sourceSets{}</td>\n<td>源文件目录设置，是AndroidSourceSet类型。</td>\n</tr>\n<tr>\n<td>buildTypes{ }</td>\n<td>BuildType类型</td>\n</tr>\n<tr>\n<td>signingConfigs{ }</td>\n<td>签名配置，SigningConfig类型</td>\n</tr>\n<tr>\n<td>productFlavors{ }</td>\n<td>产品风格配置，ProductFlavor类型</td>\n</tr>\n<tr>\n<td>testOptions{ }</td>\n<td>测试配置，TestOptions类型</td>\n</tr>\n<tr>\n<td>aaptOptions{ }</td>\n<td>aapt配置，AaptOptions类型</td>\n</tr>\n<tr>\n<td>lintOptions{ }</td>\n<td>lint配置，LintOptions类型</td>\n</tr>\n<tr>\n<td>dexOptions{ }</td>\n<td>dex配置，DexOptions类型</td>\n</tr>\n<tr>\n<td>compileOptions{ }</td>\n<td>编译配置，CompileOptions类型</td>\n</tr>\n<tr>\n<td>packagingOptions{ }</td>\n<td>PackagingOptions类型</td>\n</tr>\n<tr>\n<td>jacoco{ }</td>\n<td>JacocoExtension类型。 用于设定 jacoco版本</td>\n</tr>\n<tr>\n<td>splits{ }</td>\n<td>Splits类型</td>\n</tr>\n</tbody>\n</table>"},{"title":"Andoroid 逆向分析","date":"2016-07-23T08:51:29.000Z","toc":true,"_content":"\n\n## 主流的DEX文件反汇编工具\n目前反编译DEX文件的工具有BakSmail与Dedexer。两个反编译效果都不粗，虽然反编译出来的语句语法有点区别，但是相似度还是比较高的，\n\n## Dalvik虚拟机与Java虚拟机的区别 ##\n- Java程序经过编译，生成java字节码保存在class文件中，jvm通过解码class文件运行。\n- Dalvik运行的是有java字节码转换过来的dalvik字节码，并将其打包到一个DEX(Delvik Executable)可执行文件中，Dalvik通过解释DEX文件来执行这些字节码。\n- jvm基于栈架构，dalvik基于寄存器架构\n- AndoridSDK中有个dx工具负责将java字节码转换为dalvik字节码，dx工具对java类文件重新排列，消除所有冗余信息，比如讲java类文件中常量池进行分解，消除冗余，重组成新的常量池，所有类文件共享它。\n\n<!--more-->\n\n## Dalvik 65536##\n- 因为Dalvik是基于寄存器架构，代码中大量使用到了寄存器，同时用到的寄存器是32位，64位类型用两个相邻的寄存器表示，而Dalvik最多能支持2的16次方即65535个寄存器，采用v0作为起始值，范围v0-v65536，在Android系统中，一个Dex文件中存储方法id用的是short类型数据，所以导致你的dex中方法不能超过65k。\n\n## Dalvik字节码类型描述符 ##\n\n| 语法 | 含义                              |\n| ----  |:-------------:|\n| V      |Void,只用于返回值类型 |\n| Z      | boolean                       |\n| B      | byte\n| S      | short                             |\n| C      | char                             |\n| I       | int                               |\n| J      | long                             |\n| F      | float                             |\n| D      | double                        |\n| L       | java类类型                   |\n| [       | 数组类型                        |\n\n## Dalvik方法描述 ##\n- 方法格式：Lpackage/name/ObjectName;->MethodName()Z\n- 方法代码以.method开始，以end.method结束，根据方法的不同，在方法指令前面可能有出现#号加以注释，如#virtual method代表一个虚方法，#direct method表示这个是直接方法。\n\n## 寄存器表示方法（V P 命名法）\n* V P 命名法，是Dalvik字节码中两种不同的寄存器表示方法。\n* v命名，采用小写字母“v”开头表示函数中永达偶的局部变量与参数，所有的寄存器命名从v0开始，依次递增。\n* p命名，对函数局部变量寄存器命名无影响，命名规则为：函数中引入的参数命名从p0开始，依次递增。\n* 假设一个函数使用到M个寄存器，并且函数由N个参数，根据Dalvik虚拟机参数传递的规定：参数使用最后的N个寄存器，局部变量使用从v0开始的前M-N个寄存器。举个栗子\n```\n# virtual methods\n.method public foo(II)I\n\t.register 5\n    .parameter\n    .parameter\n    .prologue\n    .line 3\n    add-int v0, p1, p2\n    sub-int v1, p1, p2\n    mul-int/2addr v0, v1\n    return v0\n.end mehtod\n```\n\n* foo()函数使用了5个寄存器，2个显式的整形参数，方法本身是类的非静态方法，函数被调用时会传入一个隐式的类对象引用，因此实际传入的参数是3个，根据传参规则，局部变量将使用前2个寄存器，参数会使用后三个寄存器。\n\n\n\n\n\n## Dalvik指令集 ##\n- Dalvik大多数指令用寄存器作为目的操作数或源操作数，一种A/B/C/D/E/F/G/H代表一个4位的数值，用老标识0~15的数值或者v0~v15的寄存器，而AA/BB/CC/DD/EE/FF/GG/HH代表一个8位的数值，用来标识0~255的数值或者v0~v255的寄存器，AAAA/BBBB......代表一个16位的数值0~65533或者v0~v65533的寄存器。\n\n## 方法调用指令集 ##\n- 方法调用指令负责调用类实例的方法，基础指令为invoke，方法调用指令有“invoke-kind{vC,vD,vE,vF,vG},meth@bbbb”与\"invoke-kind/range{vCCCC..vNNNN},meth@BBBB\"两类，两类指令在作用上一样，只是后者在设置参数寄存器时使用了range来指定寄存器的范围。根据方法类型的不同，一共有5条方法调用指令。\n\n- \"invoke-virtual\"或\"invoke-virtual/range\" ：调用实例的虚方法\n\"invoke-super\"或\"invoke-super/range\" ：调用实例的父类方法\n\"invoke-direct\"或\"invoke-direct/range\" ：调用实例的直接方法\n\"invoke-static\"或\"invoke-static/range\" ：调用实例的静态方法\n\"invoke-interface\"或\"invoke-interface/range\" ：调用实例的接口方法\n\n- 在Android4.0版本后，Dalvik指令集增加了\n\"invoke-kind/jumbo{vCCCC..vNNNN},meth@BBBBBBBB\" 这种类型的指令，作用一样，只是使用jumbo字节码后缀，并且寄存器与指令的索引范围更大。\n\n- 方法调用指令的返回值类型必须使用move-result*指令来获取，如：\n\n```\ninvoke-state {}, Landroid/os/Parcel:->obtain{}Landroid/os/Parcel;\nmove-result-object v0\n```\n\n\n\n## 空操作指令 ##\n- 空操作指令助记符位nop，它的值位00，通常此指令被用来作为对齐代码使用，没实际操作。\n## 数据操作指令 ##\n- 数据操作指令为move，根据字节码的大小与类型不同，后面会跟上不同的后缀\nmove vA，vB 将vB寄存器的值赋给vA集群器，源寄存器与目的寄存器都位4位\nmove wide vA vB 为4位寄存器赋值\nmove/from16 vAA，vBBBB 将vBBBB寄存器的值赋给vAA寄存器，源寄存器为16位，目的寄存器为8位\nmove-object vA，vB 为对象赋值，源寄存器和目的寄存器都为4位\nmove-exception vAA 保存一个运行时发生的异常到vAA寄存器\n## 返回指令 ##\n- 返回指令指的是函数结尾时运行的最后一条指令，基础字节码位return，共有四条返回指令\nreturn-void 表示函数由一个void方法返回\nreturn vAA 表示函数返回一个32位非对象类型的值，返回值为8位寄存器vAA\nreturn wide vAA表示函数返回一个64位非对象类型的值，返回值为8位寄存器vAA\nreturn-object vAA表示函数返回一个对象类型的值，返回值为8位急促器vAA\n## 数据定义指令 ##\n- 数据定义指令用来定义常量、字符串、类等数据，基础字节码位const\nconst/4 vA,#+B 将数值符号扩展为32位后赋值给寄存器vA\nconst/16 vAA， #+BBBB 将数值符号扩展为32位后赋值vAA\nconst-string vAA, string@BBBB通过字符串索引获取一个字符串并赋给寄存器vAA\nconst-class vAA, type@BBBB 通过类型索引获取一个类引用并赋值给寄存器vAA\n## 跳转指令 ##\n- 跳转指令用于从当前地址跳转到指定的偏移处，有三种跳转指令无条件跳转(goto)、分支跳转(switch)、条件跳转(if)。\ngoto +AA 无条件跳转到指定偏移处，偏移量AA不能为0。\n\n- if-test- vA,vB,+CCCC条件跳转指令，比较vA寄存器和vB寄存器的值，如果比较结果满足则跳转到CCCC指定的偏移处，CCCC不能为0，if-test类型指令有以下几条\nif-eq 如果vA等于vB则跳转，对应java语法为if(vA == vB).\nif-ne 如果vA不等于vB则跳转，对应java语法为if(vA != vB)\nif-lt 如果vA小于vB则跳转.......\nif-le 如果小于等于\nif-ge 如果大于等于\nif-gt 如果大于\n- if=testz -vAA,+vBBBB条件跳转指令，拿vAA寄存器与0比较，如果比较结果满足或值为0就跳转到BBBB指定的偏移处\n\n## 实例参考\n```\n// 空指令\nnop\nnop\nnop\n//数据定义指令\nconst/16 v0, 0x8\nconst/4 v1, 0x5\nconst/4 v2, 0x3\n//数据操作指令\nmove v1 , v2\n//数组操作指令\nnew-array v0, v0, [I\narray-length v1, v0\n//实例操作指令\nnew-instance v1, Ljava/lang/StringBuilder;-><init>{}V\n//跳转指令\nif-nez v0, :cond_0\ngoto : goto_0\n:cond_0\n//数据转换指令\nint-to-float v2, v2\n//数据运算指令\nadd-float v2, v2, v2\n//比较指令\ncompl-float v0, v2, v2\n//字段操作指令\nsget-object v0, Ljava/lang/System;->out:Ljava/io/PrantStream;\n//构造字符串\nconst-string v1, \"Hello World\"\n//方法调用指令\ninvoke-virtual{v0, v1}, Ljava/io/PrintStream;->println(Ljava/lang/String;)V\n//返回指令\n:goto_0\nreturn-void\n```\n\n\n\n","source":"_posts/Android逆向分析.md","raw":"---\ntitle: Andoroid 逆向分析\ndate: 2016-07-23 16:51:29   \ncategories: 任垣宇   \ntag: Android   \ntoc: true  \n---\n\n\n## 主流的DEX文件反汇编工具\n目前反编译DEX文件的工具有BakSmail与Dedexer。两个反编译效果都不粗，虽然反编译出来的语句语法有点区别，但是相似度还是比较高的，\n\n## Dalvik虚拟机与Java虚拟机的区别 ##\n- Java程序经过编译，生成java字节码保存在class文件中，jvm通过解码class文件运行。\n- Dalvik运行的是有java字节码转换过来的dalvik字节码，并将其打包到一个DEX(Delvik Executable)可执行文件中，Dalvik通过解释DEX文件来执行这些字节码。\n- jvm基于栈架构，dalvik基于寄存器架构\n- AndoridSDK中有个dx工具负责将java字节码转换为dalvik字节码，dx工具对java类文件重新排列，消除所有冗余信息，比如讲java类文件中常量池进行分解，消除冗余，重组成新的常量池，所有类文件共享它。\n\n<!--more-->\n\n## Dalvik 65536##\n- 因为Dalvik是基于寄存器架构，代码中大量使用到了寄存器，同时用到的寄存器是32位，64位类型用两个相邻的寄存器表示，而Dalvik最多能支持2的16次方即65535个寄存器，采用v0作为起始值，范围v0-v65536，在Android系统中，一个Dex文件中存储方法id用的是short类型数据，所以导致你的dex中方法不能超过65k。\n\n## Dalvik字节码类型描述符 ##\n\n| 语法 | 含义                              |\n| ----  |:-------------:|\n| V      |Void,只用于返回值类型 |\n| Z      | boolean                       |\n| B      | byte\n| S      | short                             |\n| C      | char                             |\n| I       | int                               |\n| J      | long                             |\n| F      | float                             |\n| D      | double                        |\n| L       | java类类型                   |\n| [       | 数组类型                        |\n\n## Dalvik方法描述 ##\n- 方法格式：Lpackage/name/ObjectName;->MethodName()Z\n- 方法代码以.method开始，以end.method结束，根据方法的不同，在方法指令前面可能有出现#号加以注释，如#virtual method代表一个虚方法，#direct method表示这个是直接方法。\n\n## 寄存器表示方法（V P 命名法）\n* V P 命名法，是Dalvik字节码中两种不同的寄存器表示方法。\n* v命名，采用小写字母“v”开头表示函数中永达偶的局部变量与参数，所有的寄存器命名从v0开始，依次递增。\n* p命名，对函数局部变量寄存器命名无影响，命名规则为：函数中引入的参数命名从p0开始，依次递增。\n* 假设一个函数使用到M个寄存器，并且函数由N个参数，根据Dalvik虚拟机参数传递的规定：参数使用最后的N个寄存器，局部变量使用从v0开始的前M-N个寄存器。举个栗子\n```\n# virtual methods\n.method public foo(II)I\n\t.register 5\n    .parameter\n    .parameter\n    .prologue\n    .line 3\n    add-int v0, p1, p2\n    sub-int v1, p1, p2\n    mul-int/2addr v0, v1\n    return v0\n.end mehtod\n```\n\n* foo()函数使用了5个寄存器，2个显式的整形参数，方法本身是类的非静态方法，函数被调用时会传入一个隐式的类对象引用，因此实际传入的参数是3个，根据传参规则，局部变量将使用前2个寄存器，参数会使用后三个寄存器。\n\n\n\n\n\n## Dalvik指令集 ##\n- Dalvik大多数指令用寄存器作为目的操作数或源操作数，一种A/B/C/D/E/F/G/H代表一个4位的数值，用老标识0~15的数值或者v0~v15的寄存器，而AA/BB/CC/DD/EE/FF/GG/HH代表一个8位的数值，用来标识0~255的数值或者v0~v255的寄存器，AAAA/BBBB......代表一个16位的数值0~65533或者v0~v65533的寄存器。\n\n## 方法调用指令集 ##\n- 方法调用指令负责调用类实例的方法，基础指令为invoke，方法调用指令有“invoke-kind{vC,vD,vE,vF,vG},meth@bbbb”与\"invoke-kind/range{vCCCC..vNNNN},meth@BBBB\"两类，两类指令在作用上一样，只是后者在设置参数寄存器时使用了range来指定寄存器的范围。根据方法类型的不同，一共有5条方法调用指令。\n\n- \"invoke-virtual\"或\"invoke-virtual/range\" ：调用实例的虚方法\n\"invoke-super\"或\"invoke-super/range\" ：调用实例的父类方法\n\"invoke-direct\"或\"invoke-direct/range\" ：调用实例的直接方法\n\"invoke-static\"或\"invoke-static/range\" ：调用实例的静态方法\n\"invoke-interface\"或\"invoke-interface/range\" ：调用实例的接口方法\n\n- 在Android4.0版本后，Dalvik指令集增加了\n\"invoke-kind/jumbo{vCCCC..vNNNN},meth@BBBBBBBB\" 这种类型的指令，作用一样，只是使用jumbo字节码后缀，并且寄存器与指令的索引范围更大。\n\n- 方法调用指令的返回值类型必须使用move-result*指令来获取，如：\n\n```\ninvoke-state {}, Landroid/os/Parcel:->obtain{}Landroid/os/Parcel;\nmove-result-object v0\n```\n\n\n\n## 空操作指令 ##\n- 空操作指令助记符位nop，它的值位00，通常此指令被用来作为对齐代码使用，没实际操作。\n## 数据操作指令 ##\n- 数据操作指令为move，根据字节码的大小与类型不同，后面会跟上不同的后缀\nmove vA，vB 将vB寄存器的值赋给vA集群器，源寄存器与目的寄存器都位4位\nmove wide vA vB 为4位寄存器赋值\nmove/from16 vAA，vBBBB 将vBBBB寄存器的值赋给vAA寄存器，源寄存器为16位，目的寄存器为8位\nmove-object vA，vB 为对象赋值，源寄存器和目的寄存器都为4位\nmove-exception vAA 保存一个运行时发生的异常到vAA寄存器\n## 返回指令 ##\n- 返回指令指的是函数结尾时运行的最后一条指令，基础字节码位return，共有四条返回指令\nreturn-void 表示函数由一个void方法返回\nreturn vAA 表示函数返回一个32位非对象类型的值，返回值为8位寄存器vAA\nreturn wide vAA表示函数返回一个64位非对象类型的值，返回值为8位寄存器vAA\nreturn-object vAA表示函数返回一个对象类型的值，返回值为8位急促器vAA\n## 数据定义指令 ##\n- 数据定义指令用来定义常量、字符串、类等数据，基础字节码位const\nconst/4 vA,#+B 将数值符号扩展为32位后赋值给寄存器vA\nconst/16 vAA， #+BBBB 将数值符号扩展为32位后赋值vAA\nconst-string vAA, string@BBBB通过字符串索引获取一个字符串并赋给寄存器vAA\nconst-class vAA, type@BBBB 通过类型索引获取一个类引用并赋值给寄存器vAA\n## 跳转指令 ##\n- 跳转指令用于从当前地址跳转到指定的偏移处，有三种跳转指令无条件跳转(goto)、分支跳转(switch)、条件跳转(if)。\ngoto +AA 无条件跳转到指定偏移处，偏移量AA不能为0。\n\n- if-test- vA,vB,+CCCC条件跳转指令，比较vA寄存器和vB寄存器的值，如果比较结果满足则跳转到CCCC指定的偏移处，CCCC不能为0，if-test类型指令有以下几条\nif-eq 如果vA等于vB则跳转，对应java语法为if(vA == vB).\nif-ne 如果vA不等于vB则跳转，对应java语法为if(vA != vB)\nif-lt 如果vA小于vB则跳转.......\nif-le 如果小于等于\nif-ge 如果大于等于\nif-gt 如果大于\n- if=testz -vAA,+vBBBB条件跳转指令，拿vAA寄存器与0比较，如果比较结果满足或值为0就跳转到BBBB指定的偏移处\n\n## 实例参考\n```\n// 空指令\nnop\nnop\nnop\n//数据定义指令\nconst/16 v0, 0x8\nconst/4 v1, 0x5\nconst/4 v2, 0x3\n//数据操作指令\nmove v1 , v2\n//数组操作指令\nnew-array v0, v0, [I\narray-length v1, v0\n//实例操作指令\nnew-instance v1, Ljava/lang/StringBuilder;-><init>{}V\n//跳转指令\nif-nez v0, :cond_0\ngoto : goto_0\n:cond_0\n//数据转换指令\nint-to-float v2, v2\n//数据运算指令\nadd-float v2, v2, v2\n//比较指令\ncompl-float v0, v2, v2\n//字段操作指令\nsget-object v0, Ljava/lang/System;->out:Ljava/io/PrantStream;\n//构造字符串\nconst-string v1, \"Hello World\"\n//方法调用指令\ninvoke-virtual{v0, v1}, Ljava/io/PrintStream;->println(Ljava/lang/String;)V\n//返回指令\n:goto_0\nreturn-void\n```\n\n\n\n","slug":"Android逆向分析","published":1,"updated":"2016-10-08T11:25:58.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu147tvd00073omn2hzryt0c","content":"<h2 id=\"主流的DEX文件反汇编工具\"><a href=\"#主流的DEX文件反汇编工具\" class=\"headerlink\" title=\"主流的DEX文件反汇编工具\"></a>主流的DEX文件反汇编工具</h2><p>目前反编译DEX文件的工具有BakSmail与Dedexer。两个反编译效果都不粗，虽然反编译出来的语句语法有点区别，但是相似度还是比较高的，</p>\n<h2 id=\"Dalvik虚拟机与Java虚拟机的区别\"><a href=\"#Dalvik虚拟机与Java虚拟机的区别\" class=\"headerlink\" title=\"Dalvik虚拟机与Java虚拟机的区别\"></a>Dalvik虚拟机与Java虚拟机的区别</h2><ul>\n<li>Java程序经过编译，生成java字节码保存在class文件中，jvm通过解码class文件运行。</li>\n<li>Dalvik运行的是有java字节码转换过来的dalvik字节码，并将其打包到一个DEX(Delvik Executable)可执行文件中，Dalvik通过解释DEX文件来执行这些字节码。</li>\n<li>jvm基于栈架构，dalvik基于寄存器架构</li>\n<li>AndoridSDK中有个dx工具负责将java字节码转换为dalvik字节码，dx工具对java类文件重新排列，消除所有冗余信息，比如讲java类文件中常量池进行分解，消除冗余，重组成新的常量池，所有类文件共享它。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Dalvik-65536\"><a href=\"#Dalvik-65536\" class=\"headerlink\" title=\"Dalvik 65536\"></a>Dalvik 65536</h2><ul>\n<li>因为Dalvik是基于寄存器架构，代码中大量使用到了寄存器，同时用到的寄存器是32位，64位类型用两个相邻的寄存器表示，而Dalvik最多能支持2的16次方即65535个寄存器，采用v0作为起始值，范围v0-v65536，在Android系统中，一个Dex文件中存储方法id用的是short类型数据，所以导致你的dex中方法不能超过65k。</li>\n</ul>\n<h2 id=\"Dalvik字节码类型描述符\"><a href=\"#Dalvik字节码类型描述符\" class=\"headerlink\" title=\"Dalvik字节码类型描述符\"></a>Dalvik字节码类型描述符</h2><table>\n<thead>\n<tr>\n<th>语法</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>V</td>\n<td style=\"text-align:center\">Void,只用于返回值类型</td>\n</tr>\n<tr>\n<td>Z</td>\n<td style=\"text-align:center\">boolean</td>\n</tr>\n<tr>\n<td>B</td>\n<td style=\"text-align:center\">byte</td>\n</tr>\n<tr>\n<td>S</td>\n<td style=\"text-align:center\">short</td>\n</tr>\n<tr>\n<td>C</td>\n<td style=\"text-align:center\">char</td>\n</tr>\n<tr>\n<td>I</td>\n<td style=\"text-align:center\">int</td>\n</tr>\n<tr>\n<td>J</td>\n<td style=\"text-align:center\">long</td>\n</tr>\n<tr>\n<td>F</td>\n<td style=\"text-align:center\">float</td>\n</tr>\n<tr>\n<td>D</td>\n<td style=\"text-align:center\">double</td>\n</tr>\n<tr>\n<td>L</td>\n<td style=\"text-align:center\">java类类型</td>\n</tr>\n<tr>\n<td>[</td>\n<td style=\"text-align:center\">数组类型</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Dalvik方法描述\"><a href=\"#Dalvik方法描述\" class=\"headerlink\" title=\"Dalvik方法描述\"></a>Dalvik方法描述</h2><ul>\n<li>方法格式：Lpackage/name/ObjectName;-&gt;MethodName()Z</li>\n<li>方法代码以.method开始，以end.method结束，根据方法的不同，在方法指令前面可能有出现#号加以注释，如#virtual method代表一个虚方法，#direct method表示这个是直接方法。</li>\n</ul>\n<h2 id=\"寄存器表示方法（V-P-命名法）\"><a href=\"#寄存器表示方法（V-P-命名法）\" class=\"headerlink\" title=\"寄存器表示方法（V P 命名法）\"></a>寄存器表示方法（V P 命名法）</h2><ul>\n<li>V P 命名法，是Dalvik字节码中两种不同的寄存器表示方法。</li>\n<li>v命名，采用小写字母“v”开头表示函数中永达偶的局部变量与参数，所有的寄存器命名从v0开始，依次递增。</li>\n<li>p命名，对函数局部变量寄存器命名无影响，命名规则为：函数中引入的参数命名从p0开始，依次递增。</li>\n<li><p>假设一个函数使用到M个寄存器，并且函数由N个参数，根据Dalvik虚拟机参数传递的规定：参数使用最后的N个寄存器，局部变量使用从v0开始的前M-N个寄存器。举个栗子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># virtual methods</div><div class=\"line\">.method public foo(II)I</div><div class=\"line\">\t.register 5</div><div class=\"line\">    .parameter</div><div class=\"line\">    .parameter</div><div class=\"line\">    .prologue</div><div class=\"line\">    .line 3</div><div class=\"line\">    add-int v0, p1, p2</div><div class=\"line\">    sub-int v1, p1, p2</div><div class=\"line\">    mul-int/2addr v0, v1</div><div class=\"line\">    return v0</div><div class=\"line\">.end mehtod</div></pre></td></tr></table></figure>\n</li>\n<li><p>foo()函数使用了5个寄存器，2个显式的整形参数，方法本身是类的非静态方法，函数被调用时会传入一个隐式的类对象引用，因此实际传入的参数是3个，根据传参规则，局部变量将使用前2个寄存器，参数会使用后三个寄存器。</p>\n</li>\n</ul>\n<h2 id=\"Dalvik指令集\"><a href=\"#Dalvik指令集\" class=\"headerlink\" title=\"Dalvik指令集\"></a>Dalvik指令集</h2><ul>\n<li>Dalvik大多数指令用寄存器作为目的操作数或源操作数，一种A/B/C/D/E/F/G/H代表一个4位的数值，用老标识0~15的数值或者v0~v15的寄存器，而AA/BB/CC/DD/EE/FF/GG/HH代表一个8位的数值，用来标识0~255的数值或者v0~v255的寄存器，AAAA/BBBB……代表一个16位的数值0~65533或者v0~v65533的寄存器。</li>\n</ul>\n<h2 id=\"方法调用指令集\"><a href=\"#方法调用指令集\" class=\"headerlink\" title=\"方法调用指令集\"></a>方法调用指令集</h2><ul>\n<li><p>方法调用指令负责调用类实例的方法，基础指令为invoke，方法调用指令有“invoke-kind{vC,vD,vE,vF,vG},meth@bbbb”与”invoke-kind/range{vCCCC..vNNNN},meth@BBBB”两类，两类指令在作用上一样，只是后者在设置参数寄存器时使用了range来指定寄存器的范围。根据方法类型的不同，一共有5条方法调用指令。</p>\n</li>\n<li><p>“invoke-virtual”或”invoke-virtual/range” ：调用实例的虚方法<br>“invoke-super”或”invoke-super/range” ：调用实例的父类方法<br>“invoke-direct”或”invoke-direct/range” ：调用实例的直接方法<br>“invoke-static”或”invoke-static/range” ：调用实例的静态方法<br>“invoke-interface”或”invoke-interface/range” ：调用实例的接口方法</p>\n</li>\n<li><p>在Android4.0版本后，Dalvik指令集增加了<br>“invoke-kind/jumbo{vCCCC..vNNNN},meth@BBBBBBBB” 这种类型的指令，作用一样，只是使用jumbo字节码后缀，并且寄存器与指令的索引范围更大。</p>\n</li>\n<li><p>方法调用指令的返回值类型必须使用move-result*指令来获取，如：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">invoke-state &#123;&#125;, Landroid/os/Parcel:-&gt;obtain&#123;&#125;Landroid/os/Parcel;</div><div class=\"line\">move-result-object v0</div></pre></td></tr></table></figure>\n<h2 id=\"空操作指令\"><a href=\"#空操作指令\" class=\"headerlink\" title=\"空操作指令\"></a>空操作指令</h2><ul>\n<li>空操作指令助记符位nop，它的值位00，通常此指令被用来作为对齐代码使用，没实际操作。<h2 id=\"数据操作指令\"><a href=\"#数据操作指令\" class=\"headerlink\" title=\"数据操作指令\"></a>数据操作指令</h2></li>\n<li>数据操作指令为move，根据字节码的大小与类型不同，后面会跟上不同的后缀<br>move vA，vB 将vB寄存器的值赋给vA集群器，源寄存器与目的寄存器都位4位<br>move wide vA vB 为4位寄存器赋值<br>move/from16 vAA，vBBBB 将vBBBB寄存器的值赋给vAA寄存器，源寄存器为16位，目的寄存器为8位<br>move-object vA，vB 为对象赋值，源寄存器和目的寄存器都为4位<br>move-exception vAA 保存一个运行时发生的异常到vAA寄存器<h2 id=\"返回指令\"><a href=\"#返回指令\" class=\"headerlink\" title=\"返回指令\"></a>返回指令</h2></li>\n<li>返回指令指的是函数结尾时运行的最后一条指令，基础字节码位return，共有四条返回指令<br>return-void 表示函数由一个void方法返回<br>return vAA 表示函数返回一个32位非对象类型的值，返回值为8位寄存器vAA<br>return wide vAA表示函数返回一个64位非对象类型的值，返回值为8位寄存器vAA<br>return-object vAA表示函数返回一个对象类型的值，返回值为8位急促器vAA<h2 id=\"数据定义指令\"><a href=\"#数据定义指令\" class=\"headerlink\" title=\"数据定义指令\"></a>数据定义指令</h2></li>\n<li>数据定义指令用来定义常量、字符串、类等数据，基础字节码位const<br>const/4 vA,#+B 将数值符号扩展为32位后赋值给寄存器vA<br>const/16 vAA， #+BBBB 将数值符号扩展为32位后赋值vAA<br>const-string vAA, string@BBBB通过字符串索引获取一个字符串并赋给寄存器vAA<br>const-class vAA, type@BBBB 通过类型索引获取一个类引用并赋值给寄存器vAA<h2 id=\"跳转指令\"><a href=\"#跳转指令\" class=\"headerlink\" title=\"跳转指令\"></a>跳转指令</h2></li>\n<li><p>跳转指令用于从当前地址跳转到指定的偏移处，有三种跳转指令无条件跳转(goto)、分支跳转(switch)、条件跳转(if)。<br>goto +AA 无条件跳转到指定偏移处，偏移量AA不能为0。</p>\n</li>\n<li><p>if-test- vA,vB,+CCCC条件跳转指令，比较vA寄存器和vB寄存器的值，如果比较结果满足则跳转到CCCC指定的偏移处，CCCC不能为0，if-test类型指令有以下几条<br>if-eq 如果vA等于vB则跳转，对应java语法为if(vA == vB).<br>if-ne 如果vA不等于vB则跳转，对应java语法为if(vA != vB)<br>if-lt 如果vA小于vB则跳转…….<br>if-le 如果小于等于<br>if-ge 如果大于等于<br>if-gt 如果大于</p>\n</li>\n<li>if=testz -vAA,+vBBBB条件跳转指令，拿vAA寄存器与0比较，如果比较结果满足或值为0就跳转到BBBB指定的偏移处</li>\n</ul>\n<h2 id=\"实例参考\"><a href=\"#实例参考\" class=\"headerlink\" title=\"实例参考\"></a>实例参考</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 空指令</div><div class=\"line\">nop</div><div class=\"line\">nop</div><div class=\"line\">nop</div><div class=\"line\">//数据定义指令</div><div class=\"line\">const/16 v0, 0x8</div><div class=\"line\">const/4 v1, 0x5</div><div class=\"line\">const/4 v2, 0x3</div><div class=\"line\">//数据操作指令</div><div class=\"line\">move v1 , v2</div><div class=\"line\">//数组操作指令</div><div class=\"line\">new-array v0, v0, [I</div><div class=\"line\">array-length v1, v0</div><div class=\"line\">//实例操作指令</div><div class=\"line\">new-instance v1, Ljava/lang/StringBuilder;-&gt;&lt;init&gt;&#123;&#125;V</div><div class=\"line\">//跳转指令</div><div class=\"line\">if-nez v0, :cond_0</div><div class=\"line\">goto : goto_0</div><div class=\"line\">:cond_0</div><div class=\"line\">//数据转换指令</div><div class=\"line\">int-to-float v2, v2</div><div class=\"line\">//数据运算指令</div><div class=\"line\">add-float v2, v2, v2</div><div class=\"line\">//比较指令</div><div class=\"line\">compl-float v0, v2, v2</div><div class=\"line\">//字段操作指令</div><div class=\"line\">sget-object v0, Ljava/lang/System;-&gt;out:Ljava/io/PrantStream;</div><div class=\"line\">//构造字符串</div><div class=\"line\">const-string v1, &quot;Hello World&quot;</div><div class=\"line\">//方法调用指令</div><div class=\"line\">invoke-virtual&#123;v0, v1&#125;, Ljava/io/PrintStream;-&gt;println(Ljava/lang/String;)V</div><div class=\"line\">//返回指令</div><div class=\"line\">:goto_0</div><div class=\"line\">return-void</div></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"主流的DEX文件反汇编工具\"><a href=\"#主流的DEX文件反汇编工具\" class=\"headerlink\" title=\"主流的DEX文件反汇编工具\"></a>主流的DEX文件反汇编工具</h2><p>目前反编译DEX文件的工具有BakSmail与Dedexer。两个反编译效果都不粗，虽然反编译出来的语句语法有点区别，但是相似度还是比较高的，</p>\n<h2 id=\"Dalvik虚拟机与Java虚拟机的区别\"><a href=\"#Dalvik虚拟机与Java虚拟机的区别\" class=\"headerlink\" title=\"Dalvik虚拟机与Java虚拟机的区别\"></a>Dalvik虚拟机与Java虚拟机的区别</h2><ul>\n<li>Java程序经过编译，生成java字节码保存在class文件中，jvm通过解码class文件运行。</li>\n<li>Dalvik运行的是有java字节码转换过来的dalvik字节码，并将其打包到一个DEX(Delvik Executable)可执行文件中，Dalvik通过解释DEX文件来执行这些字节码。</li>\n<li>jvm基于栈架构，dalvik基于寄存器架构</li>\n<li>AndoridSDK中有个dx工具负责将java字节码转换为dalvik字节码，dx工具对java类文件重新排列，消除所有冗余信息，比如讲java类文件中常量池进行分解，消除冗余，重组成新的常量池，所有类文件共享它。</li>\n</ul>","more":"<h2 id=\"Dalvik-65536\"><a href=\"#Dalvik-65536\" class=\"headerlink\" title=\"Dalvik 65536\"></a>Dalvik 65536</h2><ul>\n<li>因为Dalvik是基于寄存器架构，代码中大量使用到了寄存器，同时用到的寄存器是32位，64位类型用两个相邻的寄存器表示，而Dalvik最多能支持2的16次方即65535个寄存器，采用v0作为起始值，范围v0-v65536，在Android系统中，一个Dex文件中存储方法id用的是short类型数据，所以导致你的dex中方法不能超过65k。</li>\n</ul>\n<h2 id=\"Dalvik字节码类型描述符\"><a href=\"#Dalvik字节码类型描述符\" class=\"headerlink\" title=\"Dalvik字节码类型描述符\"></a>Dalvik字节码类型描述符</h2><table>\n<thead>\n<tr>\n<th>语法</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>V</td>\n<td style=\"text-align:center\">Void,只用于返回值类型</td>\n</tr>\n<tr>\n<td>Z</td>\n<td style=\"text-align:center\">boolean</td>\n</tr>\n<tr>\n<td>B</td>\n<td style=\"text-align:center\">byte</td>\n</tr>\n<tr>\n<td>S</td>\n<td style=\"text-align:center\">short</td>\n</tr>\n<tr>\n<td>C</td>\n<td style=\"text-align:center\">char</td>\n</tr>\n<tr>\n<td>I</td>\n<td style=\"text-align:center\">int</td>\n</tr>\n<tr>\n<td>J</td>\n<td style=\"text-align:center\">long</td>\n</tr>\n<tr>\n<td>F</td>\n<td style=\"text-align:center\">float</td>\n</tr>\n<tr>\n<td>D</td>\n<td style=\"text-align:center\">double</td>\n</tr>\n<tr>\n<td>L</td>\n<td style=\"text-align:center\">java类类型</td>\n</tr>\n<tr>\n<td>[</td>\n<td style=\"text-align:center\">数组类型</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Dalvik方法描述\"><a href=\"#Dalvik方法描述\" class=\"headerlink\" title=\"Dalvik方法描述\"></a>Dalvik方法描述</h2><ul>\n<li>方法格式：Lpackage/name/ObjectName;-&gt;MethodName()Z</li>\n<li>方法代码以.method开始，以end.method结束，根据方法的不同，在方法指令前面可能有出现#号加以注释，如#virtual method代表一个虚方法，#direct method表示这个是直接方法。</li>\n</ul>\n<h2 id=\"寄存器表示方法（V-P-命名法）\"><a href=\"#寄存器表示方法（V-P-命名法）\" class=\"headerlink\" title=\"寄存器表示方法（V P 命名法）\"></a>寄存器表示方法（V P 命名法）</h2><ul>\n<li>V P 命名法，是Dalvik字节码中两种不同的寄存器表示方法。</li>\n<li>v命名，采用小写字母“v”开头表示函数中永达偶的局部变量与参数，所有的寄存器命名从v0开始，依次递增。</li>\n<li>p命名，对函数局部变量寄存器命名无影响，命名规则为：函数中引入的参数命名从p0开始，依次递增。</li>\n<li><p>假设一个函数使用到M个寄存器，并且函数由N个参数，根据Dalvik虚拟机参数传递的规定：参数使用最后的N个寄存器，局部变量使用从v0开始的前M-N个寄存器。举个栗子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># virtual methods</div><div class=\"line\">.method public foo(II)I</div><div class=\"line\">\t.register 5</div><div class=\"line\">    .parameter</div><div class=\"line\">    .parameter</div><div class=\"line\">    .prologue</div><div class=\"line\">    .line 3</div><div class=\"line\">    add-int v0, p1, p2</div><div class=\"line\">    sub-int v1, p1, p2</div><div class=\"line\">    mul-int/2addr v0, v1</div><div class=\"line\">    return v0</div><div class=\"line\">.end mehtod</div></pre></td></tr></table></figure>\n</li>\n<li><p>foo()函数使用了5个寄存器，2个显式的整形参数，方法本身是类的非静态方法，函数被调用时会传入一个隐式的类对象引用，因此实际传入的参数是3个，根据传参规则，局部变量将使用前2个寄存器，参数会使用后三个寄存器。</p>\n</li>\n</ul>\n<h2 id=\"Dalvik指令集\"><a href=\"#Dalvik指令集\" class=\"headerlink\" title=\"Dalvik指令集\"></a>Dalvik指令集</h2><ul>\n<li>Dalvik大多数指令用寄存器作为目的操作数或源操作数，一种A/B/C/D/E/F/G/H代表一个4位的数值，用老标识0~15的数值或者v0~v15的寄存器，而AA/BB/CC/DD/EE/FF/GG/HH代表一个8位的数值，用来标识0~255的数值或者v0~v255的寄存器，AAAA/BBBB……代表一个16位的数值0~65533或者v0~v65533的寄存器。</li>\n</ul>\n<h2 id=\"方法调用指令集\"><a href=\"#方法调用指令集\" class=\"headerlink\" title=\"方法调用指令集\"></a>方法调用指令集</h2><ul>\n<li><p>方法调用指令负责调用类实例的方法，基础指令为invoke，方法调用指令有“invoke-kind{vC,vD,vE,vF,vG},meth@bbbb”与”invoke-kind/range{vCCCC..vNNNN},meth@BBBB”两类，两类指令在作用上一样，只是后者在设置参数寄存器时使用了range来指定寄存器的范围。根据方法类型的不同，一共有5条方法调用指令。</p>\n</li>\n<li><p>“invoke-virtual”或”invoke-virtual/range” ：调用实例的虚方法<br>“invoke-super”或”invoke-super/range” ：调用实例的父类方法<br>“invoke-direct”或”invoke-direct/range” ：调用实例的直接方法<br>“invoke-static”或”invoke-static/range” ：调用实例的静态方法<br>“invoke-interface”或”invoke-interface/range” ：调用实例的接口方法</p>\n</li>\n<li><p>在Android4.0版本后，Dalvik指令集增加了<br>“invoke-kind/jumbo{vCCCC..vNNNN},meth@BBBBBBBB” 这种类型的指令，作用一样，只是使用jumbo字节码后缀，并且寄存器与指令的索引范围更大。</p>\n</li>\n<li><p>方法调用指令的返回值类型必须使用move-result*指令来获取，如：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">invoke-state &#123;&#125;, Landroid/os/Parcel:-&gt;obtain&#123;&#125;Landroid/os/Parcel;</div><div class=\"line\">move-result-object v0</div></pre></td></tr></table></figure>\n<h2 id=\"空操作指令\"><a href=\"#空操作指令\" class=\"headerlink\" title=\"空操作指令\"></a>空操作指令</h2><ul>\n<li>空操作指令助记符位nop，它的值位00，通常此指令被用来作为对齐代码使用，没实际操作。<h2 id=\"数据操作指令\"><a href=\"#数据操作指令\" class=\"headerlink\" title=\"数据操作指令\"></a>数据操作指令</h2></li>\n<li>数据操作指令为move，根据字节码的大小与类型不同，后面会跟上不同的后缀<br>move vA，vB 将vB寄存器的值赋给vA集群器，源寄存器与目的寄存器都位4位<br>move wide vA vB 为4位寄存器赋值<br>move/from16 vAA，vBBBB 将vBBBB寄存器的值赋给vAA寄存器，源寄存器为16位，目的寄存器为8位<br>move-object vA，vB 为对象赋值，源寄存器和目的寄存器都为4位<br>move-exception vAA 保存一个运行时发生的异常到vAA寄存器<h2 id=\"返回指令\"><a href=\"#返回指令\" class=\"headerlink\" title=\"返回指令\"></a>返回指令</h2></li>\n<li>返回指令指的是函数结尾时运行的最后一条指令，基础字节码位return，共有四条返回指令<br>return-void 表示函数由一个void方法返回<br>return vAA 表示函数返回一个32位非对象类型的值，返回值为8位寄存器vAA<br>return wide vAA表示函数返回一个64位非对象类型的值，返回值为8位寄存器vAA<br>return-object vAA表示函数返回一个对象类型的值，返回值为8位急促器vAA<h2 id=\"数据定义指令\"><a href=\"#数据定义指令\" class=\"headerlink\" title=\"数据定义指令\"></a>数据定义指令</h2></li>\n<li>数据定义指令用来定义常量、字符串、类等数据，基础字节码位const<br>const/4 vA,#+B 将数值符号扩展为32位后赋值给寄存器vA<br>const/16 vAA， #+BBBB 将数值符号扩展为32位后赋值vAA<br>const-string vAA, string@BBBB通过字符串索引获取一个字符串并赋给寄存器vAA<br>const-class vAA, type@BBBB 通过类型索引获取一个类引用并赋值给寄存器vAA<h2 id=\"跳转指令\"><a href=\"#跳转指令\" class=\"headerlink\" title=\"跳转指令\"></a>跳转指令</h2></li>\n<li><p>跳转指令用于从当前地址跳转到指定的偏移处，有三种跳转指令无条件跳转(goto)、分支跳转(switch)、条件跳转(if)。<br>goto +AA 无条件跳转到指定偏移处，偏移量AA不能为0。</p>\n</li>\n<li><p>if-test- vA,vB,+CCCC条件跳转指令，比较vA寄存器和vB寄存器的值，如果比较结果满足则跳转到CCCC指定的偏移处，CCCC不能为0，if-test类型指令有以下几条<br>if-eq 如果vA等于vB则跳转，对应java语法为if(vA == vB).<br>if-ne 如果vA不等于vB则跳转，对应java语法为if(vA != vB)<br>if-lt 如果vA小于vB则跳转…….<br>if-le 如果小于等于<br>if-ge 如果大于等于<br>if-gt 如果大于</p>\n</li>\n<li>if=testz -vAA,+vBBBB条件跳转指令，拿vAA寄存器与0比较，如果比较结果满足或值为0就跳转到BBBB指定的偏移处</li>\n</ul>\n<h2 id=\"实例参考\"><a href=\"#实例参考\" class=\"headerlink\" title=\"实例参考\"></a>实例参考</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 空指令</div><div class=\"line\">nop</div><div class=\"line\">nop</div><div class=\"line\">nop</div><div class=\"line\">//数据定义指令</div><div class=\"line\">const/16 v0, 0x8</div><div class=\"line\">const/4 v1, 0x5</div><div class=\"line\">const/4 v2, 0x3</div><div class=\"line\">//数据操作指令</div><div class=\"line\">move v1 , v2</div><div class=\"line\">//数组操作指令</div><div class=\"line\">new-array v0, v0, [I</div><div class=\"line\">array-length v1, v0</div><div class=\"line\">//实例操作指令</div><div class=\"line\">new-instance v1, Ljava/lang/StringBuilder;-&gt;&lt;init&gt;&#123;&#125;V</div><div class=\"line\">//跳转指令</div><div class=\"line\">if-nez v0, :cond_0</div><div class=\"line\">goto : goto_0</div><div class=\"line\">:cond_0</div><div class=\"line\">//数据转换指令</div><div class=\"line\">int-to-float v2, v2</div><div class=\"line\">//数据运算指令</div><div class=\"line\">add-float v2, v2, v2</div><div class=\"line\">//比较指令</div><div class=\"line\">compl-float v0, v2, v2</div><div class=\"line\">//字段操作指令</div><div class=\"line\">sget-object v0, Ljava/lang/System;-&gt;out:Ljava/io/PrantStream;</div><div class=\"line\">//构造字符串</div><div class=\"line\">const-string v1, &quot;Hello World&quot;</div><div class=\"line\">//方法调用指令</div><div class=\"line\">invoke-virtual&#123;v0, v1&#125;, Ljava/io/PrintStream;-&gt;println(Ljava/lang/String;)V</div><div class=\"line\">//返回指令</div><div class=\"line\">:goto_0</div><div class=\"line\">return-void</div></pre></td></tr></table></figure>"},{"title":"GitPage系列-使用方法","date":"2016-10-07T07:41:29.000Z","toc":true,"_content":"\n\n## Hexo官方说明\n[https://hexo.io/docs/tag-plugins.html](https://hexo.io/docs/tag-plugins.html \"传送门\")\n\n## MarkDown语法\n[http://www.appinn.com/markdown/](http://www.appinn.com/markdown/ \"传送门\")\n\n## Next主题官方说明\n[http://theme-next.iissnan.com/](http://theme-next.iissnan.com/ \"传送门\")\n\n\n<!--more-->\n\n## FAQ\n### 文章添加代码块有注释时的高亮\n\n- 建议对应代码块语法选择相应的注释符号。比如html用<!-- -->,css用/* */，否则可能会出现代码不高亮或者高亮有问题的情况。\n\n### hexo如何在索引页显示摘要和阅读全文按钮\n\n\n- 在合适的位置插入下列内容作为分隔符\n    \n\t`<!--more-->\n\t`\n\n\n\n\n","source":"_posts/GitPage系列-Hexo使用方法.md","raw":"---\ntitle: GitPage系列-使用方法\ndate: 2016-10-07 15:41:29   \ncategories: 任垣宇\ntag: github\ntoc: true  \n---\n\n\n## Hexo官方说明\n[https://hexo.io/docs/tag-plugins.html](https://hexo.io/docs/tag-plugins.html \"传送门\")\n\n## MarkDown语法\n[http://www.appinn.com/markdown/](http://www.appinn.com/markdown/ \"传送门\")\n\n## Next主题官方说明\n[http://theme-next.iissnan.com/](http://theme-next.iissnan.com/ \"传送门\")\n\n\n<!--more-->\n\n## FAQ\n### 文章添加代码块有注释时的高亮\n\n- 建议对应代码块语法选择相应的注释符号。比如html用<!-- -->,css用/* */，否则可能会出现代码不高亮或者高亮有问题的情况。\n\n### hexo如何在索引页显示摘要和阅读全文按钮\n\n\n- 在合适的位置插入下列内容作为分隔符\n    \n\t`<!--more-->\n\t`\n\n\n\n\n","slug":"GitPage系列-Hexo使用方法","published":1,"updated":"2016-10-08T11:25:58.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu147tvh00083omnx0ewcykm","content":"<h2 id=\"Hexo官方说明\"><a href=\"#Hexo官方说明\" class=\"headerlink\" title=\"Hexo官方说明\"></a>Hexo官方说明</h2><p><a href=\"https://hexo.io/docs/tag-plugins.html\" title=\"传送门\" target=\"_blank\" rel=\"external\">https://hexo.io/docs/tag-plugins.html</a></p>\n<h2 id=\"MarkDown语法\"><a href=\"#MarkDown语法\" class=\"headerlink\" title=\"MarkDown语法\"></a>MarkDown语法</h2><p><a href=\"http://www.appinn.com/markdown/\" title=\"传送门\" target=\"_blank\" rel=\"external\">http://www.appinn.com/markdown/</a></p>\n<h2 id=\"Next主题官方说明\"><a href=\"#Next主题官方说明\" class=\"headerlink\" title=\"Next主题官方说明\"></a>Next主题官方说明</h2><p><a href=\"http://theme-next.iissnan.com/\" title=\"传送门\" target=\"_blank\" rel=\"external\">http://theme-next.iissnan.com/</a></p>\n<a id=\"more\"></a>\n<h2 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h2><h3 id=\"文章添加代码块有注释时的高亮\"><a href=\"#文章添加代码块有注释时的高亮\" class=\"headerlink\" title=\"文章添加代码块有注释时的高亮\"></a>文章添加代码块有注释时的高亮</h3><ul>\n<li>建议对应代码块语法选择相应的注释符号。比如html用<!-- -->,css用/<em> </em>/，否则可能会出现代码不高亮或者高亮有问题的情况。</li>\n</ul>\n<h3 id=\"hexo如何在索引页显示摘要和阅读全文按钮\"><a href=\"#hexo如何在索引页显示摘要和阅读全文按钮\" class=\"headerlink\" title=\"hexo如何在索引页显示摘要和阅读全文按钮\"></a>hexo如何在索引页显示摘要和阅读全文按钮</h3><ul>\n<li><p>在合适的位置插入下列内容作为分隔符</p>\n<p>  <code>&lt;!--more--&gt;</code></p>\n</li>\n</ul>\n","excerpt":"<h2 id=\"Hexo官方说明\"><a href=\"#Hexo官方说明\" class=\"headerlink\" title=\"Hexo官方说明\"></a>Hexo官方说明</h2><p><a href=\"https://hexo.io/docs/tag-plugins.html\" title=\"传送门\">https://hexo.io/docs/tag-plugins.html</a></p>\n<h2 id=\"MarkDown语法\"><a href=\"#MarkDown语法\" class=\"headerlink\" title=\"MarkDown语法\"></a>MarkDown语法</h2><p><a href=\"http://www.appinn.com/markdown/\" title=\"传送门\">http://www.appinn.com/markdown/</a></p>\n<h2 id=\"Next主题官方说明\"><a href=\"#Next主题官方说明\" class=\"headerlink\" title=\"Next主题官方说明\"></a>Next主题官方说明</h2><p><a href=\"http://theme-next.iissnan.com/\" title=\"传送门\">http://theme-next.iissnan.com/</a></p>","more":"<h2 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h2><h3 id=\"文章添加代码块有注释时的高亮\"><a href=\"#文章添加代码块有注释时的高亮\" class=\"headerlink\" title=\"文章添加代码块有注释时的高亮\"></a>文章添加代码块有注释时的高亮</h3><ul>\n<li>建议对应代码块语法选择相应的注释符号。比如html用<!-- -->,css用/<em> </em>/，否则可能会出现代码不高亮或者高亮有问题的情况。</li>\n</ul>\n<h3 id=\"hexo如何在索引页显示摘要和阅读全文按钮\"><a href=\"#hexo如何在索引页显示摘要和阅读全文按钮\" class=\"headerlink\" title=\"hexo如何在索引页显示摘要和阅读全文按钮\"></a>hexo如何在索引页显示摘要和阅读全文按钮</h3><ul>\n<li><p>在合适的位置插入下列内容作为分隔符</p>\n<p>  <code>&lt;!--more--&gt;</code></p>\n</li>\n</ul>"},{"title":"Gradle入门到精通","date":"2016-07-23T08:51:29.000Z","toc":true,"_content":"\n\n## Gradle是什么\nGradle与Ant和Maven一样都是依赖管理/自动化项目构建工具，但是与后者不同的是使用名为Groovy的语言而不是xml来编写，xml虽然通俗易懂，但是很难描述if/else的关系，而Groovy没有这种顾虑，gradle完全兼容Maven和ivy.\n\n## Groovy是什么\nGroovy是一种动态语言，官方对其的定义是在Java平台上的、具有像Python、Ruby、Smalltalk语言特性的灵活性动态语言，Groovy保证了这些特性像Java语法一样使用，用大白话来说就是基于Java并扩展，使其编写起来像脚本一样，写完就跑，Groovy内部将其编译成字节码文件然后启动jvm来运行.\nGroovy还有一个特点就是它是一种DSL(Domain Specific Language)领域相关语言。\n\n<!--more-->\n\n## AndroidStudio为什么采用Gradle架构\n更容易重用资源和代码;\n可以更容易创建不同的版本的程序，多个类型的apk包；\n更容易配置，扩大;\n更好的IDE集成;\n## Gradle基础\n- Gradle与Maven一样有个配置文件，Maven是pom.xml而gradle是build.gradle.\n- AndroidStudio中至少包含两个build.gradle文件，两者作用域不一样，一个是project,一个是module范围,Project与module是一对多的关系，每新加一个module则会有一个新的build.gradle创建出来.\n## Gradle默认创建配置详解\n1. project的build.gradle\n```\n    buildscript {\n     //构建进程依赖的仓库\n        repositories {\n            jcenter()\n        }\n        //构建进程需要依赖的库\n        dependencies {\n        //声明的是gradle插件的版本\n            classpath 'com.android.tools.build:gradle:2.1.0'\n        }\n    }\n\n    allprojects {\n    //配置全部项目依赖的仓库,这样每一个module就不用配置仓库了\n        repositories {\n            jcenter()\n        }\n    }\n\n    task clean(type: Delete) {\n        delete rootProject.buildDir\n    }\n```\n\n    *PS:为什么repositories要声明两次，实际上是因为作用不同，buildscript种的仓库是gradle脚本中所需要的资源，而allprojects下的仓库是项目中所有模块需要的资源*\n\n2. module下的build.gradle\n\n    ```\n        //声明插件，这是1个android程序，如果是android库,应当是com.android.library\n        apply plugin: 'com.android.application'\n        //安卓构建进程需要配置的参数\n        android {\n            //编译版本\n            compileSdkVersion 23\n            //buildtool版本\n            buildToolsVersion \"23.0.3\"\n            //默许配置，会同时利用到debug和release版本上\n            defaultConfig {\n                applicationId \"com.roy.rutils\"\n                minSdkVersion 19\n                targetSdkVersion 23\n                versionCode 1\n                versionName \"1.0\"\n            }\n            //这里面可以配置debug和release版本的1些参数，比如混淆、签名配置等\n            buildTypes {\n                release {\n                    minifyEnabled false\n                    //是不是开启混淆,混淆文件位置\n                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n                }\n            }\n        }\n        //模块依赖\n        dependencies {\n            compile fileTree(include: ['*.jar'], dir: 'libs')\n            testCompile 'junit:junit:4.12'\n            compile 'com.android.support:appcompat-v7:23.4.0'\n            compile project(':rutils')\n        }\n    ```\n3. settings.gradle\n这个文件是用来配置多模块的，比如你的项目有两个模块module-a,module-b,那末你就需要在这个文件中进行配置，格式以下：\ninclude ':module-a',':module-b'\n\n4. gradle文件夹\n这里面有两个文件，gradle-wrapper.jar和gradle-wrapper.properties,它们就是gradle wrapper。gradle项目都会有，你可以通过命令gradle init来创建它们（条件是本地安装了gradle并且配置到了环境变量中）。\n\n5. gradlew和gradlew.bat\n这分别是linux下的shell脚本和windows下的批处理文件，它们的作用是根据gradle-wrapper.properties文件中的distributionUrl下载对应的gradle版本。这样就能够保证在不同的环境下构建时都是使用的统一版本的gradle，即便该环境没有安装gradle也能够，由于gradle wrapper会自动下载对应的gradle版本。\ngradlew的用法跟gradle一模一样，比如履行构建gradle build命令，你可以用gradlew build。gradlew即gradle wrapper的缩写。\n\n6. gradle仓库\ngradle有3种仓库，maven仓库，ivy仓库和flat本地仓库。声明方式以下：\nmaven{ url \"...\" } ivy{ url \"...\" } flatDir{ dirs 'xxx' }\n有一些仓库提供了别名，可直接使用：\nrepositories{ mavenCentral() jcenter() mavenLocal() }\n\n## Gradle Task\n- gradle中有1个核心概念叫任务，跟maven中的插件目标类似。\n- gradle的android插件提供了4个顶级任务\n- assemble 构建项目输出 \n- check 运行检测和测试任务 \n- build 运行assemble\n- check clean 清算输出任务\n- 履行任务可以通过gradle/gradlew+任务名称的方式执，履行1个顶级任务会同时履行与其依赖的任务，比如你履行gradlew assemble,它通常会履行:gradlew assembleDebug gradlew assembleRelease,这时候会在你项目的build/outputs/apk或build/outputs/aar目录生成输出文件\n\n注：linux下履行构建任务需要首先更改gradlew脚本的权限，然后才能履行该脚本：\nchmod +x gradlew ./gradlew assemble\n可以通过：\ngradlew tasks\n列出所有可用的任务。在Android Studio中可以打开右边gradle视图查看所有任务。\n\n## Gradle命令\n\n## Gradle技巧\n1. 导入本地jar包\n跟eclipse不太1样，android studio导入本地jar除将jar包放到模块的libs目录中之外，还得在该模块的build.gradle中进行配置，配置方式是在dependencies结点下进行以下声明：\ncompile files('libs/xxx.jar')\n如果libs下有多个jar文件，可以这样声明：\ncompile fileTree(dir: 'libs', include: ['*.jar'])\n\n2. 导入3方maven仓库\n可能你项目需要的1些库文件是在你们公司的私服上，这时候候repositories中唯一jcenter就不行了，你还需要把私服地址配到里面来，注意，应当配到project的build.gradle中的allprojects结点下或直接配到某个模块中如果唯一这个模块用到。\n配置方式：\nrepositories{ maven{ url=\"http://mvnrepo.xxx.com\" } }\n\n3. 导入某个project\n4. 将库项目导出为aar\n首先你的项目必须是1个库项目，build.gradle中进行配置：\napply plugin : 'com.android.library'\n然后你可以在命令行中进到项目目录，履行以下gradle任务：\ngradlew assembleRelease//确保该目录下有gradlew文件\n生成的aar在/build/output/aar文件夹中","source":"_posts/Gradle入门到精通.md","raw":"---\ntitle: Gradle入门到精通\ndate: 2016-07-23 16:51:29   \ncategories: 任垣宇   \ntag: Android \ntoc: true  \n---\n\n\n## Gradle是什么\nGradle与Ant和Maven一样都是依赖管理/自动化项目构建工具，但是与后者不同的是使用名为Groovy的语言而不是xml来编写，xml虽然通俗易懂，但是很难描述if/else的关系，而Groovy没有这种顾虑，gradle完全兼容Maven和ivy.\n\n## Groovy是什么\nGroovy是一种动态语言，官方对其的定义是在Java平台上的、具有像Python、Ruby、Smalltalk语言特性的灵活性动态语言，Groovy保证了这些特性像Java语法一样使用，用大白话来说就是基于Java并扩展，使其编写起来像脚本一样，写完就跑，Groovy内部将其编译成字节码文件然后启动jvm来运行.\nGroovy还有一个特点就是它是一种DSL(Domain Specific Language)领域相关语言。\n\n<!--more-->\n\n## AndroidStudio为什么采用Gradle架构\n更容易重用资源和代码;\n可以更容易创建不同的版本的程序，多个类型的apk包；\n更容易配置，扩大;\n更好的IDE集成;\n## Gradle基础\n- Gradle与Maven一样有个配置文件，Maven是pom.xml而gradle是build.gradle.\n- AndroidStudio中至少包含两个build.gradle文件，两者作用域不一样，一个是project,一个是module范围,Project与module是一对多的关系，每新加一个module则会有一个新的build.gradle创建出来.\n## Gradle默认创建配置详解\n1. project的build.gradle\n```\n    buildscript {\n     //构建进程依赖的仓库\n        repositories {\n            jcenter()\n        }\n        //构建进程需要依赖的库\n        dependencies {\n        //声明的是gradle插件的版本\n            classpath 'com.android.tools.build:gradle:2.1.0'\n        }\n    }\n\n    allprojects {\n    //配置全部项目依赖的仓库,这样每一个module就不用配置仓库了\n        repositories {\n            jcenter()\n        }\n    }\n\n    task clean(type: Delete) {\n        delete rootProject.buildDir\n    }\n```\n\n    *PS:为什么repositories要声明两次，实际上是因为作用不同，buildscript种的仓库是gradle脚本中所需要的资源，而allprojects下的仓库是项目中所有模块需要的资源*\n\n2. module下的build.gradle\n\n    ```\n        //声明插件，这是1个android程序，如果是android库,应当是com.android.library\n        apply plugin: 'com.android.application'\n        //安卓构建进程需要配置的参数\n        android {\n            //编译版本\n            compileSdkVersion 23\n            //buildtool版本\n            buildToolsVersion \"23.0.3\"\n            //默许配置，会同时利用到debug和release版本上\n            defaultConfig {\n                applicationId \"com.roy.rutils\"\n                minSdkVersion 19\n                targetSdkVersion 23\n                versionCode 1\n                versionName \"1.0\"\n            }\n            //这里面可以配置debug和release版本的1些参数，比如混淆、签名配置等\n            buildTypes {\n                release {\n                    minifyEnabled false\n                    //是不是开启混淆,混淆文件位置\n                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n                }\n            }\n        }\n        //模块依赖\n        dependencies {\n            compile fileTree(include: ['*.jar'], dir: 'libs')\n            testCompile 'junit:junit:4.12'\n            compile 'com.android.support:appcompat-v7:23.4.0'\n            compile project(':rutils')\n        }\n    ```\n3. settings.gradle\n这个文件是用来配置多模块的，比如你的项目有两个模块module-a,module-b,那末你就需要在这个文件中进行配置，格式以下：\ninclude ':module-a',':module-b'\n\n4. gradle文件夹\n这里面有两个文件，gradle-wrapper.jar和gradle-wrapper.properties,它们就是gradle wrapper。gradle项目都会有，你可以通过命令gradle init来创建它们（条件是本地安装了gradle并且配置到了环境变量中）。\n\n5. gradlew和gradlew.bat\n这分别是linux下的shell脚本和windows下的批处理文件，它们的作用是根据gradle-wrapper.properties文件中的distributionUrl下载对应的gradle版本。这样就能够保证在不同的环境下构建时都是使用的统一版本的gradle，即便该环境没有安装gradle也能够，由于gradle wrapper会自动下载对应的gradle版本。\ngradlew的用法跟gradle一模一样，比如履行构建gradle build命令，你可以用gradlew build。gradlew即gradle wrapper的缩写。\n\n6. gradle仓库\ngradle有3种仓库，maven仓库，ivy仓库和flat本地仓库。声明方式以下：\nmaven{ url \"...\" } ivy{ url \"...\" } flatDir{ dirs 'xxx' }\n有一些仓库提供了别名，可直接使用：\nrepositories{ mavenCentral() jcenter() mavenLocal() }\n\n## Gradle Task\n- gradle中有1个核心概念叫任务，跟maven中的插件目标类似。\n- gradle的android插件提供了4个顶级任务\n- assemble 构建项目输出 \n- check 运行检测和测试任务 \n- build 运行assemble\n- check clean 清算输出任务\n- 履行任务可以通过gradle/gradlew+任务名称的方式执，履行1个顶级任务会同时履行与其依赖的任务，比如你履行gradlew assemble,它通常会履行:gradlew assembleDebug gradlew assembleRelease,这时候会在你项目的build/outputs/apk或build/outputs/aar目录生成输出文件\n\n注：linux下履行构建任务需要首先更改gradlew脚本的权限，然后才能履行该脚本：\nchmod +x gradlew ./gradlew assemble\n可以通过：\ngradlew tasks\n列出所有可用的任务。在Android Studio中可以打开右边gradle视图查看所有任务。\n\n## Gradle命令\n\n## Gradle技巧\n1. 导入本地jar包\n跟eclipse不太1样，android studio导入本地jar除将jar包放到模块的libs目录中之外，还得在该模块的build.gradle中进行配置，配置方式是在dependencies结点下进行以下声明：\ncompile files('libs/xxx.jar')\n如果libs下有多个jar文件，可以这样声明：\ncompile fileTree(dir: 'libs', include: ['*.jar'])\n\n2. 导入3方maven仓库\n可能你项目需要的1些库文件是在你们公司的私服上，这时候候repositories中唯一jcenter就不行了，你还需要把私服地址配到里面来，注意，应当配到project的build.gradle中的allprojects结点下或直接配到某个模块中如果唯一这个模块用到。\n配置方式：\nrepositories{ maven{ url=\"http://mvnrepo.xxx.com\" } }\n\n3. 导入某个project\n4. 将库项目导出为aar\n首先你的项目必须是1个库项目，build.gradle中进行配置：\napply plugin : 'com.android.library'\n然后你可以在命令行中进到项目目录，履行以下gradle任务：\ngradlew assembleRelease//确保该目录下有gradlew文件\n生成的aar在/build/output/aar文件夹中","slug":"Gradle入门到精通","published":1,"updated":"2016-10-08T11:25:58.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu147tvn000c3omnzkh0u6y0","content":"<h2 id=\"Gradle是什么\"><a href=\"#Gradle是什么\" class=\"headerlink\" title=\"Gradle是什么\"></a>Gradle是什么</h2><p>Gradle与Ant和Maven一样都是依赖管理/自动化项目构建工具，但是与后者不同的是使用名为Groovy的语言而不是xml来编写，xml虽然通俗易懂，但是很难描述if/else的关系，而Groovy没有这种顾虑，gradle完全兼容Maven和ivy.</p>\n<h2 id=\"Groovy是什么\"><a href=\"#Groovy是什么\" class=\"headerlink\" title=\"Groovy是什么\"></a>Groovy是什么</h2><p>Groovy是一种动态语言，官方对其的定义是在Java平台上的、具有像Python、Ruby、Smalltalk语言特性的灵活性动态语言，Groovy保证了这些特性像Java语法一样使用，用大白话来说就是基于Java并扩展，使其编写起来像脚本一样，写完就跑，Groovy内部将其编译成字节码文件然后启动jvm来运行.<br>Groovy还有一个特点就是它是一种DSL(Domain Specific Language)领域相关语言。</p>\n<a id=\"more\"></a>\n<h2 id=\"AndroidStudio为什么采用Gradle架构\"><a href=\"#AndroidStudio为什么采用Gradle架构\" class=\"headerlink\" title=\"AndroidStudio为什么采用Gradle架构\"></a>AndroidStudio为什么采用Gradle架构</h2><p>更容易重用资源和代码;<br>可以更容易创建不同的版本的程序，多个类型的apk包；<br>更容易配置，扩大;<br>更好的IDE集成;</p>\n<h2 id=\"Gradle基础\"><a href=\"#Gradle基础\" class=\"headerlink\" title=\"Gradle基础\"></a>Gradle基础</h2><ul>\n<li>Gradle与Maven一样有个配置文件，Maven是pom.xml而gradle是build.gradle.</li>\n<li>AndroidStudio中至少包含两个build.gradle文件，两者作用域不一样，一个是project,一个是module范围,Project与module是一对多的关系，每新加一个module则会有一个新的build.gradle创建出来.<h2 id=\"Gradle默认创建配置详解\"><a href=\"#Gradle默认创建配置详解\" class=\"headerlink\" title=\"Gradle默认创建配置详解\"></a>Gradle默认创建配置详解</h2></li>\n</ul>\n<ol>\n<li><p>project的build.gradle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildscript &#123;</div><div class=\"line\"> //构建进程依赖的仓库</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        jcenter()</div><div class=\"line\">    &#125;</div><div class=\"line\">    //构建进程需要依赖的库</div><div class=\"line\">    dependencies &#123;</div><div class=\"line\">    //声明的是gradle插件的版本</div><div class=\"line\">        classpath &apos;com.android.tools.build:gradle:2.1.0&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">allprojects &#123;</div><div class=\"line\">//配置全部项目依赖的仓库,这样每一个module就不用配置仓库了</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        jcenter()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">task clean(type: Delete) &#123;</div><div class=\"line\">    delete rootProject.buildDir</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> <em>PS:为什么repositories要声明两次，实际上是因为作用不同，buildscript种的仓库是gradle脚本中所需要的资源，而allprojects下的仓库是项目中所有模块需要的资源</em></p>\n</li>\n<li><p>module下的build.gradle</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">//声明插件，这是1个android程序，如果是android库,应当是com.android.library</div><div class=\"line\">apply plugin: &apos;com.android.application&apos;</div><div class=\"line\">//安卓构建进程需要配置的参数</div><div class=\"line\">android &#123;</div><div class=\"line\">    //编译版本</div><div class=\"line\">    compileSdkVersion 23</div><div class=\"line\">    //buildtool版本</div><div class=\"line\">    buildToolsVersion &quot;23.0.3&quot;</div><div class=\"line\">    //默许配置，会同时利用到debug和release版本上</div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        applicationId &quot;com.roy.rutils&quot;</div><div class=\"line\">        minSdkVersion 19</div><div class=\"line\">        targetSdkVersion 23</div><div class=\"line\">        versionCode 1</div><div class=\"line\">        versionName &quot;1.0&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //这里面可以配置debug和release版本的1些参数，比如混淆、签名配置等</div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            minifyEnabled false</div><div class=\"line\">            //是不是开启混淆,混淆文件位置</div><div class=\"line\">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//模块依赖</div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;)</div><div class=\"line\">    testCompile &apos;junit:junit:4.12&apos;</div><div class=\"line\">    compile &apos;com.android.support:appcompat-v7:23.4.0&apos;</div><div class=\"line\">    compile project(&apos;:rutils&apos;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>settings.gradle<br>这个文件是用来配置多模块的，比如你的项目有两个模块module-a,module-b,那末你就需要在这个文件中进行配置，格式以下：<br>include ‘:module-a’,’:module-b’</p>\n</li>\n<li><p>gradle文件夹<br>这里面有两个文件，gradle-wrapper.jar和gradle-wrapper.properties,它们就是gradle wrapper。gradle项目都会有，你可以通过命令gradle init来创建它们（条件是本地安装了gradle并且配置到了环境变量中）。</p>\n</li>\n<li><p>gradlew和gradlew.bat<br>这分别是linux下的shell脚本和windows下的批处理文件，它们的作用是根据gradle-wrapper.properties文件中的distributionUrl下载对应的gradle版本。这样就能够保证在不同的环境下构建时都是使用的统一版本的gradle，即便该环境没有安装gradle也能够，由于gradle wrapper会自动下载对应的gradle版本。<br>gradlew的用法跟gradle一模一样，比如履行构建gradle build命令，你可以用gradlew build。gradlew即gradle wrapper的缩写。</p>\n</li>\n<li><p>gradle仓库<br>gradle有3种仓库，maven仓库，ivy仓库和flat本地仓库。声明方式以下：<br>maven{ url “…” } ivy{ url “…” } flatDir{ dirs ‘xxx’ }<br>有一些仓库提供了别名，可直接使用：<br>repositories{ mavenCentral() jcenter() mavenLocal() }</p>\n</li>\n</ol>\n<h2 id=\"Gradle-Task\"><a href=\"#Gradle-Task\" class=\"headerlink\" title=\"Gradle Task\"></a>Gradle Task</h2><ul>\n<li>gradle中有1个核心概念叫任务，跟maven中的插件目标类似。</li>\n<li>gradle的android插件提供了4个顶级任务</li>\n<li>assemble 构建项目输出 </li>\n<li>check 运行检测和测试任务 </li>\n<li>build 运行assemble</li>\n<li>check clean 清算输出任务</li>\n<li>履行任务可以通过gradle/gradlew+任务名称的方式执，履行1个顶级任务会同时履行与其依赖的任务，比如你履行gradlew assemble,它通常会履行:gradlew assembleDebug gradlew assembleRelease,这时候会在你项目的build/outputs/apk或build/outputs/aar目录生成输出文件</li>\n</ul>\n<p>注：linux下履行构建任务需要首先更改gradlew脚本的权限，然后才能履行该脚本：<br>chmod +x gradlew ./gradlew assemble<br>可以通过：<br>gradlew tasks<br>列出所有可用的任务。在Android Studio中可以打开右边gradle视图查看所有任务。</p>\n<h2 id=\"Gradle命令\"><a href=\"#Gradle命令\" class=\"headerlink\" title=\"Gradle命令\"></a>Gradle命令</h2><h2 id=\"Gradle技巧\"><a href=\"#Gradle技巧\" class=\"headerlink\" title=\"Gradle技巧\"></a>Gradle技巧</h2><ol>\n<li><p>导入本地jar包<br>跟eclipse不太1样，android studio导入本地jar除将jar包放到模块的libs目录中之外，还得在该模块的build.gradle中进行配置，配置方式是在dependencies结点下进行以下声明：<br>compile files(‘libs/xxx.jar’)<br>如果libs下有多个jar文件，可以这样声明：<br>compile fileTree(dir: ‘libs’, include: [‘*.jar’])</p>\n</li>\n<li><p>导入3方maven仓库<br>可能你项目需要的1些库文件是在你们公司的私服上，这时候候repositories中唯一jcenter就不行了，你还需要把私服地址配到里面来，注意，应当配到project的build.gradle中的allprojects结点下或直接配到某个模块中如果唯一这个模块用到。<br>配置方式：<br>repositories{ maven{ url=”<a href=\"http://mvnrepo.xxx.com\" target=\"_blank\" rel=\"external\">http://mvnrepo.xxx.com</a>“ } }</p>\n</li>\n<li><p>导入某个project</p>\n</li>\n<li>将库项目导出为aar<br>首先你的项目必须是1个库项目，build.gradle中进行配置：<br>apply plugin : ‘com.android.library’<br>然后你可以在命令行中进到项目目录，履行以下gradle任务：<br>gradlew assembleRelease//确保该目录下有gradlew文件<br>生成的aar在/build/output/aar文件夹中</li>\n</ol>\n","excerpt":"<h2 id=\"Gradle是什么\"><a href=\"#Gradle是什么\" class=\"headerlink\" title=\"Gradle是什么\"></a>Gradle是什么</h2><p>Gradle与Ant和Maven一样都是依赖管理/自动化项目构建工具，但是与后者不同的是使用名为Groovy的语言而不是xml来编写，xml虽然通俗易懂，但是很难描述if/else的关系，而Groovy没有这种顾虑，gradle完全兼容Maven和ivy.</p>\n<h2 id=\"Groovy是什么\"><a href=\"#Groovy是什么\" class=\"headerlink\" title=\"Groovy是什么\"></a>Groovy是什么</h2><p>Groovy是一种动态语言，官方对其的定义是在Java平台上的、具有像Python、Ruby、Smalltalk语言特性的灵活性动态语言，Groovy保证了这些特性像Java语法一样使用，用大白话来说就是基于Java并扩展，使其编写起来像脚本一样，写完就跑，Groovy内部将其编译成字节码文件然后启动jvm来运行.<br>Groovy还有一个特点就是它是一种DSL(Domain Specific Language)领域相关语言。</p>","more":"<h2 id=\"AndroidStudio为什么采用Gradle架构\"><a href=\"#AndroidStudio为什么采用Gradle架构\" class=\"headerlink\" title=\"AndroidStudio为什么采用Gradle架构\"></a>AndroidStudio为什么采用Gradle架构</h2><p>更容易重用资源和代码;<br>可以更容易创建不同的版本的程序，多个类型的apk包；<br>更容易配置，扩大;<br>更好的IDE集成;</p>\n<h2 id=\"Gradle基础\"><a href=\"#Gradle基础\" class=\"headerlink\" title=\"Gradle基础\"></a>Gradle基础</h2><ul>\n<li>Gradle与Maven一样有个配置文件，Maven是pom.xml而gradle是build.gradle.</li>\n<li>AndroidStudio中至少包含两个build.gradle文件，两者作用域不一样，一个是project,一个是module范围,Project与module是一对多的关系，每新加一个module则会有一个新的build.gradle创建出来.<h2 id=\"Gradle默认创建配置详解\"><a href=\"#Gradle默认创建配置详解\" class=\"headerlink\" title=\"Gradle默认创建配置详解\"></a>Gradle默认创建配置详解</h2></li>\n</ul>\n<ol>\n<li><p>project的build.gradle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildscript &#123;</div><div class=\"line\"> //构建进程依赖的仓库</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        jcenter()</div><div class=\"line\">    &#125;</div><div class=\"line\">    //构建进程需要依赖的库</div><div class=\"line\">    dependencies &#123;</div><div class=\"line\">    //声明的是gradle插件的版本</div><div class=\"line\">        classpath &apos;com.android.tools.build:gradle:2.1.0&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">allprojects &#123;</div><div class=\"line\">//配置全部项目依赖的仓库,这样每一个module就不用配置仓库了</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        jcenter()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">task clean(type: Delete) &#123;</div><div class=\"line\">    delete rootProject.buildDir</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> <em>PS:为什么repositories要声明两次，实际上是因为作用不同，buildscript种的仓库是gradle脚本中所需要的资源，而allprojects下的仓库是项目中所有模块需要的资源</em></p>\n</li>\n<li><p>module下的build.gradle</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">//声明插件，这是1个android程序，如果是android库,应当是com.android.library</div><div class=\"line\">apply plugin: &apos;com.android.application&apos;</div><div class=\"line\">//安卓构建进程需要配置的参数</div><div class=\"line\">android &#123;</div><div class=\"line\">    //编译版本</div><div class=\"line\">    compileSdkVersion 23</div><div class=\"line\">    //buildtool版本</div><div class=\"line\">    buildToolsVersion &quot;23.0.3&quot;</div><div class=\"line\">    //默许配置，会同时利用到debug和release版本上</div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        applicationId &quot;com.roy.rutils&quot;</div><div class=\"line\">        minSdkVersion 19</div><div class=\"line\">        targetSdkVersion 23</div><div class=\"line\">        versionCode 1</div><div class=\"line\">        versionName &quot;1.0&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //这里面可以配置debug和release版本的1些参数，比如混淆、签名配置等</div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            minifyEnabled false</div><div class=\"line\">            //是不是开启混淆,混淆文件位置</div><div class=\"line\">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//模块依赖</div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;)</div><div class=\"line\">    testCompile &apos;junit:junit:4.12&apos;</div><div class=\"line\">    compile &apos;com.android.support:appcompat-v7:23.4.0&apos;</div><div class=\"line\">    compile project(&apos;:rutils&apos;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>settings.gradle<br>这个文件是用来配置多模块的，比如你的项目有两个模块module-a,module-b,那末你就需要在这个文件中进行配置，格式以下：<br>include ‘:module-a’,’:module-b’</p>\n</li>\n<li><p>gradle文件夹<br>这里面有两个文件，gradle-wrapper.jar和gradle-wrapper.properties,它们就是gradle wrapper。gradle项目都会有，你可以通过命令gradle init来创建它们（条件是本地安装了gradle并且配置到了环境变量中）。</p>\n</li>\n<li><p>gradlew和gradlew.bat<br>这分别是linux下的shell脚本和windows下的批处理文件，它们的作用是根据gradle-wrapper.properties文件中的distributionUrl下载对应的gradle版本。这样就能够保证在不同的环境下构建时都是使用的统一版本的gradle，即便该环境没有安装gradle也能够，由于gradle wrapper会自动下载对应的gradle版本。<br>gradlew的用法跟gradle一模一样，比如履行构建gradle build命令，你可以用gradlew build。gradlew即gradle wrapper的缩写。</p>\n</li>\n<li><p>gradle仓库<br>gradle有3种仓库，maven仓库，ivy仓库和flat本地仓库。声明方式以下：<br>maven{ url “…” } ivy{ url “…” } flatDir{ dirs ‘xxx’ }<br>有一些仓库提供了别名，可直接使用：<br>repositories{ mavenCentral() jcenter() mavenLocal() }</p>\n</li>\n</ol>\n<h2 id=\"Gradle-Task\"><a href=\"#Gradle-Task\" class=\"headerlink\" title=\"Gradle Task\"></a>Gradle Task</h2><ul>\n<li>gradle中有1个核心概念叫任务，跟maven中的插件目标类似。</li>\n<li>gradle的android插件提供了4个顶级任务</li>\n<li>assemble 构建项目输出 </li>\n<li>check 运行检测和测试任务 </li>\n<li>build 运行assemble</li>\n<li>check clean 清算输出任务</li>\n<li>履行任务可以通过gradle/gradlew+任务名称的方式执，履行1个顶级任务会同时履行与其依赖的任务，比如你履行gradlew assemble,它通常会履行:gradlew assembleDebug gradlew assembleRelease,这时候会在你项目的build/outputs/apk或build/outputs/aar目录生成输出文件</li>\n</ul>\n<p>注：linux下履行构建任务需要首先更改gradlew脚本的权限，然后才能履行该脚本：<br>chmod +x gradlew ./gradlew assemble<br>可以通过：<br>gradlew tasks<br>列出所有可用的任务。在Android Studio中可以打开右边gradle视图查看所有任务。</p>\n<h2 id=\"Gradle命令\"><a href=\"#Gradle命令\" class=\"headerlink\" title=\"Gradle命令\"></a>Gradle命令</h2><h2 id=\"Gradle技巧\"><a href=\"#Gradle技巧\" class=\"headerlink\" title=\"Gradle技巧\"></a>Gradle技巧</h2><ol>\n<li><p>导入本地jar包<br>跟eclipse不太1样，android studio导入本地jar除将jar包放到模块的libs目录中之外，还得在该模块的build.gradle中进行配置，配置方式是在dependencies结点下进行以下声明：<br>compile files(‘libs/xxx.jar’)<br>如果libs下有多个jar文件，可以这样声明：<br>compile fileTree(dir: ‘libs’, include: [‘*.jar’])</p>\n</li>\n<li><p>导入3方maven仓库<br>可能你项目需要的1些库文件是在你们公司的私服上，这时候候repositories中唯一jcenter就不行了，你还需要把私服地址配到里面来，注意，应当配到project的build.gradle中的allprojects结点下或直接配到某个模块中如果唯一这个模块用到。<br>配置方式：<br>repositories{ maven{ url=”<a href=\"http://mvnrepo.xxx.com\">http://mvnrepo.xxx.com</a>“ } }</p>\n</li>\n<li><p>导入某个project</p>\n</li>\n<li>将库项目导出为aar<br>首先你的项目必须是1个库项目，build.gradle中进行配置：<br>apply plugin : ‘com.android.library’<br>然后你可以在命令行中进到项目目录，履行以下gradle任务：<br>gradlew assembleRelease//确保该目录下有gradlew文件<br>生成的aar在/build/output/aar文件夹中</li>\n</ol>"},{"title":"ImageView scaleType属性分析","date":"2016-10-08T08:11:29.000Z","toc":true,"_content":"\n# ImageView scaleType 属性\n\n|scaleType\t|描述|\n| ----------|---|\n|center\t|将图片中心与 ImageView 的中心重合，保持图片的原始尺寸，只显示落在 ImageView 内部的图片部分\n|centerCrop\t|将图片中心与 ImageView 的中心重合，然后进行等比例缩放，直到图片宽高均不小于 ImageView 的宽高，位于 ImageView 之外的图片部分不显示，缩放过程中保持图片宽高比\n|centerInside\t|将图片中心与 ImageView 的中心重合，如果图片全部位于 ImageView 内部，则完成，否则对图片等比例缩小直到图片宽高均不大于ImageView 的宽高\n|fitCenter\t|将图片中心与 ImageView 的中心重合，然后等比例进行缩放，直到图片宽高均不大于 ImageView 的宽高；fitCenter 与 centerInside 的区别在于：当图片原始尺寸小于 ImageView 时，后者不对图片做任何处理而前者对图片进行等比例放大直至其宽高至少有一项与 ImageView 对应的宽高相等\n|fitStart\t|将图片左上角与 ImageView 的左上角重合，其余和 fitCenter 相同\n|fitEnd\t|将图片右下角与 ImageView 的右下角重合，其余和 fitCenter 相同\n|fitXY\t|将图片的宽高缩放到与 ImageView 的宽高完全相同；缩放过程完全无视原始图片的宽高比\n|matrix\t|根据 setImageMatrix() 方法设置的 Matrix 类来显示图片，Matrix 类可以用来实现图片翻转等效果\n\n\n由上述图表可以看出，scaleType 可分为 3 大类：center，fit，matrix：\n\n以 center 开头的值表示将图片中心和 ImageView 中心重合，然后保持原始尺寸（center）或将图片缩放到圈在 ImageView 内部（centerInside）或将图片放大到覆盖 ImageView（centerCrop）；\n以 fit 开头的值表示将图片的宽高缩放到至少有一项与 ImageView 的宽高相同，根据双方对准的起点分为中心（fitCenter）、左上角（fitStart）、右下角（fitEnd）或无起点（fitXY）；\n\n\n|scaleType\t|图片和ImageView中心点重合\t|保持图片原始尺寸\t|保持图片宽高比\t|显示图片与 ImageView 大比较\n|-----------|------------------------|-----------------|-------------|-------------|\n|center\t|√\t|√\t|√\t|同图片原始尺寸和 ImageView 大小关系\n|centerCrop\t|√\t|x\t|√\t|>=\n|centerInside\t|√\t|x\t|√\t|<=\n|fitCenter\t|√\t|x\t|√\t|<=\n|fitStart\t|x\t|x\t|√\t|<=\n|fitEnd\t|x\t|x\t|√\t|<=\n|fitXY\t|√\t|x\t|x\t|=","source":"_posts/ImageView scaleType属性分析.md","raw":"---\ntitle: ImageView scaleType属性分析 \ndate: 2016-10-8 16:11:29   \ncategories: 任垣宇   \ntag: Android\ntoc: true  \n---\n\n# ImageView scaleType 属性\n\n|scaleType\t|描述|\n| ----------|---|\n|center\t|将图片中心与 ImageView 的中心重合，保持图片的原始尺寸，只显示落在 ImageView 内部的图片部分\n|centerCrop\t|将图片中心与 ImageView 的中心重合，然后进行等比例缩放，直到图片宽高均不小于 ImageView 的宽高，位于 ImageView 之外的图片部分不显示，缩放过程中保持图片宽高比\n|centerInside\t|将图片中心与 ImageView 的中心重合，如果图片全部位于 ImageView 内部，则完成，否则对图片等比例缩小直到图片宽高均不大于ImageView 的宽高\n|fitCenter\t|将图片中心与 ImageView 的中心重合，然后等比例进行缩放，直到图片宽高均不大于 ImageView 的宽高；fitCenter 与 centerInside 的区别在于：当图片原始尺寸小于 ImageView 时，后者不对图片做任何处理而前者对图片进行等比例放大直至其宽高至少有一项与 ImageView 对应的宽高相等\n|fitStart\t|将图片左上角与 ImageView 的左上角重合，其余和 fitCenter 相同\n|fitEnd\t|将图片右下角与 ImageView 的右下角重合，其余和 fitCenter 相同\n|fitXY\t|将图片的宽高缩放到与 ImageView 的宽高完全相同；缩放过程完全无视原始图片的宽高比\n|matrix\t|根据 setImageMatrix() 方法设置的 Matrix 类来显示图片，Matrix 类可以用来实现图片翻转等效果\n\n\n由上述图表可以看出，scaleType 可分为 3 大类：center，fit，matrix：\n\n以 center 开头的值表示将图片中心和 ImageView 中心重合，然后保持原始尺寸（center）或将图片缩放到圈在 ImageView 内部（centerInside）或将图片放大到覆盖 ImageView（centerCrop）；\n以 fit 开头的值表示将图片的宽高缩放到至少有一项与 ImageView 的宽高相同，根据双方对准的起点分为中心（fitCenter）、左上角（fitStart）、右下角（fitEnd）或无起点（fitXY）；\n\n\n|scaleType\t|图片和ImageView中心点重合\t|保持图片原始尺寸\t|保持图片宽高比\t|显示图片与 ImageView 大比较\n|-----------|------------------------|-----------------|-------------|-------------|\n|center\t|√\t|√\t|√\t|同图片原始尺寸和 ImageView 大小关系\n|centerCrop\t|√\t|x\t|√\t|>=\n|centerInside\t|√\t|x\t|√\t|<=\n|fitCenter\t|√\t|x\t|√\t|<=\n|fitStart\t|x\t|x\t|√\t|<=\n|fitEnd\t|x\t|x\t|√\t|<=\n|fitXY\t|√\t|x\t|x\t|=","slug":"ImageView scaleType属性分析","published":1,"updated":"2016-10-08T11:25:58.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu147tvq000f3omn193wjprt","content":"<h1 id=\"ImageView-scaleType-属性\"><a href=\"#ImageView-scaleType-属性\" class=\"headerlink\" title=\"ImageView scaleType 属性\"></a>ImageView scaleType 属性</h1><table>\n<thead>\n<tr>\n<th>scaleType</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>center</td>\n<td>将图片中心与 ImageView 的中心重合，保持图片的原始尺寸，只显示落在 ImageView 内部的图片部分</td>\n</tr>\n<tr>\n<td>centerCrop</td>\n<td>将图片中心与 ImageView 的中心重合，然后进行等比例缩放，直到图片宽高均不小于 ImageView 的宽高，位于 ImageView 之外的图片部分不显示，缩放过程中保持图片宽高比</td>\n</tr>\n<tr>\n<td>centerInside</td>\n<td>将图片中心与 ImageView 的中心重合，如果图片全部位于 ImageView 内部，则完成，否则对图片等比例缩小直到图片宽高均不大于ImageView 的宽高</td>\n</tr>\n<tr>\n<td>fitCenter</td>\n<td>将图片中心与 ImageView 的中心重合，然后等比例进行缩放，直到图片宽高均不大于 ImageView 的宽高；fitCenter 与 centerInside 的区别在于：当图片原始尺寸小于 ImageView 时，后者不对图片做任何处理而前者对图片进行等比例放大直至其宽高至少有一项与 ImageView 对应的宽高相等</td>\n</tr>\n<tr>\n<td>fitStart</td>\n<td>将图片左上角与 ImageView 的左上角重合，其余和 fitCenter 相同</td>\n</tr>\n<tr>\n<td>fitEnd</td>\n<td>将图片右下角与 ImageView 的右下角重合，其余和 fitCenter 相同</td>\n</tr>\n<tr>\n<td>fitXY</td>\n<td>将图片的宽高缩放到与 ImageView 的宽高完全相同；缩放过程完全无视原始图片的宽高比</td>\n</tr>\n<tr>\n<td>matrix</td>\n<td>根据 setImageMatrix() 方法设置的 Matrix 类来显示图片，Matrix 类可以用来实现图片翻转等效果</td>\n</tr>\n</tbody>\n</table>\n<p>由上述图表可以看出，scaleType 可分为 3 大类：center，fit，matrix：</p>\n<p>以 center 开头的值表示将图片中心和 ImageView 中心重合，然后保持原始尺寸（center）或将图片缩放到圈在 ImageView 内部（centerInside）或将图片放大到覆盖 ImageView（centerCrop）；<br>以 fit 开头的值表示将图片的宽高缩放到至少有一项与 ImageView 的宽高相同，根据双方对准的起点分为中心（fitCenter）、左上角（fitStart）、右下角（fitEnd）或无起点（fitXY）；</p>\n<table>\n<thead>\n<tr>\n<th>scaleType</th>\n<th>图片和ImageView中心点重合</th>\n<th>保持图片原始尺寸</th>\n<th>保持图片宽高比</th>\n<th>显示图片与 ImageView 大比较</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>center</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>同图片原始尺寸和 ImageView 大小关系</td>\n</tr>\n<tr>\n<td>centerCrop</td>\n<td>√</td>\n<td>x</td>\n<td>√</td>\n<td>&gt;=</td>\n</tr>\n<tr>\n<td>centerInside</td>\n<td>√</td>\n<td>x</td>\n<td>√</td>\n<td>&lt;=</td>\n</tr>\n<tr>\n<td>fitCenter</td>\n<td>√</td>\n<td>x</td>\n<td>√</td>\n<td>&lt;=</td>\n</tr>\n<tr>\n<td>fitStart</td>\n<td>x</td>\n<td>x</td>\n<td>√</td>\n<td>&lt;=</td>\n</tr>\n<tr>\n<td>fitEnd</td>\n<td>x</td>\n<td>x</td>\n<td>√</td>\n<td>&lt;=</td>\n</tr>\n<tr>\n<td>fitXY</td>\n<td>√</td>\n<td>x</td>\n<td>x</td>\n<td>=</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h1 id=\"ImageView-scaleType-属性\"><a href=\"#ImageView-scaleType-属性\" class=\"headerlink\" title=\"ImageView scaleType 属性\"></a>ImageView scaleType 属性</h1><table>\n<thead>\n<tr>\n<th>scaleType</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>center</td>\n<td>将图片中心与 ImageView 的中心重合，保持图片的原始尺寸，只显示落在 ImageView 内部的图片部分</td>\n</tr>\n<tr>\n<td>centerCrop</td>\n<td>将图片中心与 ImageView 的中心重合，然后进行等比例缩放，直到图片宽高均不小于 ImageView 的宽高，位于 ImageView 之外的图片部分不显示，缩放过程中保持图片宽高比</td>\n</tr>\n<tr>\n<td>centerInside</td>\n<td>将图片中心与 ImageView 的中心重合，如果图片全部位于 ImageView 内部，则完成，否则对图片等比例缩小直到图片宽高均不大于ImageView 的宽高</td>\n</tr>\n<tr>\n<td>fitCenter</td>\n<td>将图片中心与 ImageView 的中心重合，然后等比例进行缩放，直到图片宽高均不大于 ImageView 的宽高；fitCenter 与 centerInside 的区别在于：当图片原始尺寸小于 ImageView 时，后者不对图片做任何处理而前者对图片进行等比例放大直至其宽高至少有一项与 ImageView 对应的宽高相等</td>\n</tr>\n<tr>\n<td>fitStart</td>\n<td>将图片左上角与 ImageView 的左上角重合，其余和 fitCenter 相同</td>\n</tr>\n<tr>\n<td>fitEnd</td>\n<td>将图片右下角与 ImageView 的右下角重合，其余和 fitCenter 相同</td>\n</tr>\n<tr>\n<td>fitXY</td>\n<td>将图片的宽高缩放到与 ImageView 的宽高完全相同；缩放过程完全无视原始图片的宽高比</td>\n</tr>\n<tr>\n<td>matrix</td>\n<td>根据 setImageMatrix() 方法设置的 Matrix 类来显示图片，Matrix 类可以用来实现图片翻转等效果</td>\n</tr>\n</tbody>\n</table>\n<p>由上述图表可以看出，scaleType 可分为 3 大类：center，fit，matrix：</p>\n<p>以 center 开头的值表示将图片中心和 ImageView 中心重合，然后保持原始尺寸（center）或将图片缩放到圈在 ImageView 内部（centerInside）或将图片放大到覆盖 ImageView（centerCrop）；<br>以 fit 开头的值表示将图片的宽高缩放到至少有一项与 ImageView 的宽高相同，根据双方对准的起点分为中心（fitCenter）、左上角（fitStart）、右下角（fitEnd）或无起点（fitXY）；</p>\n<table>\n<thead>\n<tr>\n<th>scaleType</th>\n<th>图片和ImageView中心点重合</th>\n<th>保持图片原始尺寸</th>\n<th>保持图片宽高比</th>\n<th>显示图片与 ImageView 大比较</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>center</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n<td>同图片原始尺寸和 ImageView 大小关系</td>\n</tr>\n<tr>\n<td>centerCrop</td>\n<td>√</td>\n<td>x</td>\n<td>√</td>\n<td>&gt;=</td>\n</tr>\n<tr>\n<td>centerInside</td>\n<td>√</td>\n<td>x</td>\n<td>√</td>\n<td>&lt;=</td>\n</tr>\n<tr>\n<td>fitCenter</td>\n<td>√</td>\n<td>x</td>\n<td>√</td>\n<td>&lt;=</td>\n</tr>\n<tr>\n<td>fitStart</td>\n<td>x</td>\n<td>x</td>\n<td>√</td>\n<td>&lt;=</td>\n</tr>\n<tr>\n<td>fitEnd</td>\n<td>x</td>\n<td>x</td>\n<td>√</td>\n<td>&lt;=</td>\n</tr>\n<tr>\n<td>fitXY</td>\n<td>√</td>\n<td>x</td>\n<td>x</td>\n<td>=</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"利用git解决hexo博客多PC间同步问题","date":"2016-10-08T06:21:29.000Z","toc":true,"_content":"\n# 业务场景\n单位和家里两PC，同时都想更新blog。而由于hexo没有后台，而且全部文件都在本地生成，所以如果公司电脑上发表了A文章后回家又写了篇B文章，在家里上传后你会发现只有B文章而A文章没了（因为家里的PC上没有A文章的md文件），所以多台电脑同时用来写文章的时候，需要解决备份问题。\n\n#解决方案\n- git\n\n优点：部署完成后更新方便，hexo 更新完后只需要再更新全站到git即可\n缺点：部署过程相对比较麻烦，对新手不友好\n\n#配置过程\n1. 上传blog到git\n\t\n- 删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件\n\t- 初始化仓库\n\t- blog根目录下执行以下代码：\n\t> \tgit init\n\t\tgit remote add origin <server>\n\t\t<server>是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端\n\n2. 将git的内容同步到本地\n \n\t> \tgit add .  #添加blog目录下所有文件，注意有个`.`（`.gitignore`声明过的文件不包含在内)\n\t\tgit commit -m \"first commit\" #添加更新说明\n\t\tgit push -u origin master #推送更新到云端服务器\n\n3. 更新文章后的同步操作\n4. ","source":"_posts/利用git解决hexo博客多PC间同步问题.md","raw":"---\ntitle: 利用git解决hexo博客多PC间同步问题 \ndate: 2016-10-8 14:21:29   \ncategories: 任垣宇   \ntag: github\ntoc: true  \n---\n\n# 业务场景\n单位和家里两PC，同时都想更新blog。而由于hexo没有后台，而且全部文件都在本地生成，所以如果公司电脑上发表了A文章后回家又写了篇B文章，在家里上传后你会发现只有B文章而A文章没了（因为家里的PC上没有A文章的md文件），所以多台电脑同时用来写文章的时候，需要解决备份问题。\n\n#解决方案\n- git\n\n优点：部署完成后更新方便，hexo 更新完后只需要再更新全站到git即可\n缺点：部署过程相对比较麻烦，对新手不友好\n\n#配置过程\n1. 上传blog到git\n\t\n- 删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件\n\t- 初始化仓库\n\t- blog根目录下执行以下代码：\n\t> \tgit init\n\t\tgit remote add origin <server>\n\t\t<server>是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端\n\n2. 将git的内容同步到本地\n \n\t> \tgit add .  #添加blog目录下所有文件，注意有个`.`（`.gitignore`声明过的文件不包含在内)\n\t\tgit commit -m \"first commit\" #添加更新说明\n\t\tgit push -u origin master #推送更新到云端服务器\n\n3. 更新文章后的同步操作\n4. ","slug":"利用git解决hexo博客多PC间同步问题","published":1,"updated":"2016-10-08T11:25:58.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu147tvu000k3omnw35rqtki","content":"<h1 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h1><p>单位和家里两PC，同时都想更新blog。而由于hexo没有后台，而且全部文件都在本地生成，所以如果公司电脑上发表了A文章后回家又写了篇B文章，在家里上传后你会发现只有B文章而A文章没了（因为家里的PC上没有A文章的md文件），所以多台电脑同时用来写文章的时候，需要解决备份问题。</p>\n<p>#解决方案</p>\n<ul>\n<li>git</li>\n</ul>\n<p>优点：部署完成后更新方便，hexo 更新完后只需要再更新全站到git即可<br>缺点：部署过程相对比较麻烦，对新手不友好</p>\n<p>#配置过程</p>\n<ol>\n<li>上传blog到git</li>\n</ol>\n<ul>\n<li>删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件<ul>\n<li>初始化仓库</li>\n<li>blog根目录下执行以下代码：<blockquote>\n<pre><code>git init\n</code></pre><p>  git remote add origin <server><br>  <server>是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端</server></server></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p>将git的内容同步到本地</p>\n<blockquote>\n<pre><code>git add .  #添加blog目录下所有文件，注意有个`.`（`.gitignore`声明过的文件不包含在内)\n git commit -m &quot;first commit&quot; #添加更新说明\n git push -u origin master #推送更新到云端服务器\n</code></pre></blockquote>\n</li>\n<li><p>更新文章后的同步操作</p>\n</li>\n<li></li>\n</ol>\n","excerpt":"","more":"<h1 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h1><p>单位和家里两PC，同时都想更新blog。而由于hexo没有后台，而且全部文件都在本地生成，所以如果公司电脑上发表了A文章后回家又写了篇B文章，在家里上传后你会发现只有B文章而A文章没了（因为家里的PC上没有A文章的md文件），所以多台电脑同时用来写文章的时候，需要解决备份问题。</p>\n<p>#解决方案</p>\n<ul>\n<li>git</li>\n</ul>\n<p>优点：部署完成后更新方便，hexo 更新完后只需要再更新全站到git即可<br>缺点：部署过程相对比较麻烦，对新手不友好</p>\n<p>#配置过程</p>\n<ol>\n<li>上传blog到git</li>\n</ol>\n<ul>\n<li>删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件<ul>\n<li>初始化仓库</li>\n<li>blog根目录下执行以下代码：<blockquote>\n<pre><code>git init\n</code></pre><p>  git remote add origin <server><br>  <server>是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p>将git的内容同步到本地</p>\n<blockquote>\n<pre><code>git add .  #添加blog目录下所有文件，注意有个`.`（`.gitignore`声明过的文件不包含在内)\n git commit -m &quot;first commit&quot; #添加更新说明\n git push -u origin master #推送更新到云端服务器\n</code></pre></blockquote>\n</li>\n<li><p>更新文章后的同步操作</p>\n</li>\n<li></li>\n</ol>\n"},{"title":"Kevin test","date":"2016-10-08T08:11:29.000Z","toc":true,"_content":"","source":"_posts/kevin.md","raw":"---\ntitle: Kevin test \ndate: 2016-10-8 16:11:29   \ncategories: ����   \ntag: Android\ntoc: true  \n---","slug":"kevin","published":1,"updated":"2016-10-08T11:27:52.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu14abmr0000skmnv9tld44e","content":"","excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"ciu147tvd00073omn2hzryt0c","category_id":"ciu147tv600043omn3zfh9ivq","_id":"ciu147tvp000d3omnqukv2npn"},{"post_id":"ciu147tux00003omnpwb15kui","category_id":"ciu147tv600043omn3zfh9ivq","_id":"ciu147tvt000i3omn2o7hh48a"},{"post_id":"ciu147tvh00083omnx0ewcykm","category_id":"ciu147tv600043omn3zfh9ivq","_id":"ciu147tvx000l3omn22et6vuo"},{"post_id":"ciu147tvn000c3omnzkh0u6y0","category_id":"ciu147tv600043omn3zfh9ivq","_id":"ciu147tvz000o3omnur0otq92"},{"post_id":"ciu147tv200023omn41ildrn0","category_id":"ciu147tv600043omn3zfh9ivq","_id":"ciu147tvz000q3omni50oqtn9"},{"post_id":"ciu147tvq000f3omn193wjprt","category_id":"ciu147tv600043omn3zfh9ivq","_id":"ciu147tw0000t3omn2x3c3wjx"},{"post_id":"ciu147tvu000k3omnw35rqtki","category_id":"ciu147tv600043omn3zfh9ivq","_id":"ciu147tw2000v3omnvxzlsf2n"},{"post_id":"ciu147tvb00063omnvv43or68","category_id":"ciu147tv600043omn3zfh9ivq","_id":"ciu147tw3000w3omn3d86oerw"},{"post_id":"ciu14abmr0000skmnv9tld44e","category_id":"ciu14abmx0001skmncvfp61gd","_id":"ciu14abn30003skmna45gzyyd"}],"PostTag":[{"post_id":"ciu147tvd00073omn2hzryt0c","tag_id":"ciu147tva00053omnzofq4oe9","_id":"ciu147tvm000b3omn0xy9ag60"},{"post_id":"ciu147tux00003omnpwb15kui","tag_id":"ciu147tva00053omnzofq4oe9","_id":"ciu147tvp000e3omnhosf12b8"},{"post_id":"ciu147tvn000c3omnzkh0u6y0","tag_id":"ciu147tva00053omnzofq4oe9","_id":"ciu147tvt000j3omnwq50ftrw"},{"post_id":"ciu147tv200023omn41ildrn0","tag_id":"ciu147tva00053omnzofq4oe9","_id":"ciu147tvy000m3omn1lay2aef"},{"post_id":"ciu147tvq000f3omn193wjprt","tag_id":"ciu147tva00053omnzofq4oe9","_id":"ciu147tvz000p3omnieexif27"},{"post_id":"ciu147tvb00063omnvv43or68","tag_id":"ciu147tva00053omnzofq4oe9","_id":"ciu147tw0000r3omn1ugplenf"},{"post_id":"ciu147tvh00083omnx0ewcykm","tag_id":"ciu147tvy000n3omn58adea05","_id":"ciu147tw2000u3omn9ruvw5hf"},{"post_id":"ciu147tvu000k3omnw35rqtki","tag_id":"ciu147tvy000n3omn58adea05","_id":"ciu147tw3000x3omncqq2ryct"},{"post_id":"ciu14abmr0000skmnv9tld44e","tag_id":"ciu147tva00053omnzofq4oe9","_id":"ciu14abn20002skmn9uih1sxq"}],"Tag":[{"name":"Android","_id":"ciu147tva00053omnzofq4oe9"},{"name":"github","_id":"ciu147tvy000n3omn58adea05"}]}}